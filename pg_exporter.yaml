###############################################################
# PostgreSQL/Pgbouncer Metric Queries
# Author:   Vonng (fengruohang@outlook.com)
# Desc  :   pg_exporter metrics config files
# Ver   :   PostgreSQL 10, 11, 12, pgbouncer 1.9+
# Ctime :   2019-12-09
# Mtime :   2020-01-08
###############################################################

#-------------------------------------------------------------#
# Metric Query Example
#-------------------------------------------------------------#

#  pg_primary_only:       <---- Branch name, distinguish different branch of a metric query
#    name: pg             <---- actual Query name, used as metric prefix, will set to branch if not provide
#    desc: PostgreSQL basic information (on primary)                    <---- query description
#    query: |                                                           <---- query string
#
#      SELECT extract(EPOCH FROM CURRENT_TIMESTAMP)                  AS timestamp,
#             pg_current_wal_lsn() - '0/0'                           AS lsn,
#             pg_current_wal_insert_lsn() - '0/0'                    AS insert_lsn,
#             pg_current_wal_lsn() - '0/0'                           AS write_lsn,
#             pg_current_wal_flush_lsn() - '0/0'                     AS flush_lsn,
#             extract(EPOCH FROM now() - pg_postmaster_start_time()) AS uptime,
#             extract(EPOCH FROM now() - pg_conf_load_time())        AS conf_reload_time,
#             pg_is_in_backup()                                      AS is_in_backup,
#             extract(EPOCH FROM now() - pg_backup_start_time())     AS backup_time;
#
#                                <---- following field are [OPTIONAL], control execution policy
#    ttl: 10                     <---- cache ttl: how long will exporter cache it's result. set to 0 to disable cache
#    timeout: 0.1                <---- timeout: in seconds, query execeed this will be canceled. default is 0.1, set to -1 to disable timeout
#    min_version: 100000         <---- minimal supported version in server version number format, e.g  120001 = 12.1, 090601 = 9.6.1
#    max_version: 130000         <---- maximal supported version in server version number format, boundary not include
#    fatal: false                <---- if query marked fatal fail, this scrape will abort immidiately
#
#    tags: [cluster, primary]    <---- tags consist of one or more string, which could be:
#                                        * 'cluster' marks this query as cluster level, so it will only execute once for same PostgreSQL Server
#                                        * 'primary' marks this query can only run on a master instance (will not execute if pg_is_in_recovery())
#                                        * 'standby' marks this query can only run on a recoverying instance (will execute if pg_is_in_recovery())
#                                        * 'dbname:<dbname>' means this query will only execute on database with name '<dbname>'
#                                        * 'extension:<extname>' means this query will only execute when extension '<extname>' is installed
#                                        * 'schema:<nspname>' means this query will only execute when schema '<nspname>' exist
#                                        * 'not:<negtag>' means this query will only execute when exporter is launch without tag '<negtag>'
#                                        * '<tag>' means this query will only execute when exporter is launch with tag '<tag>'
#                                           (tag could not be cluster,primary,standby or have special prefix)
#
#
#    metrics:                    <---- this is a list of returned columns, each column must have a name, usage, could have an alias and description
#      - timestamp:              <---- this is column name, should be exactly same as returned column name
#          rename: ts            <---- rename is optional, will use this alias instead of column name
#          usage: GAUGE          <---- usage could be
#                                        * DISCARD: completely ignore this field
#                                        * LABEL: use columnName:columnValue as a label in result
#                                        * GAUGE: use this column as a metric, which is '<query.name>_<column.name>{<labels>} column.value'
#                                        * COUNTER: same as GAUGE, except it is a counter.
#
#          description: database current timestamp
#      - lsn:
#          usage: COUNTER
#          description: log sequence number, current write location (on primary)
#      - insert_lsn:
#          usage: COUNTER
#          description: primary only, location of current wal inserting
#      - write_lsn:
#          usage: COUNTER
#          description: primary only, location of current wal writing
#      - flush_lsn:
#          usage: COUNTER
#          description: primary only, location of current wal syncing
#      - uptime:
#          usage: GAUGE
#          description: seconds since postmaster start
#      - conf_reload_time:
#          usage: GAUGE
#          description: seconds since last configuration reload
#      - is_in_backup:
#          usage: GAUGE
#          description: 1 if backup is in progress
#      - backup_time:
#          usage: GAUGE
#          description: seconds since current backup start. null if don't have one


###############################################################
# Cluster Level Metrics
#   001 ~ 021 are cluster level metrics, which means they are
#   identical and visible to all db in that cluster. Cluster
#   query have tag 'cluster', and will only execute once on
#   each database cluster (i.e. a PostgreSQL Server)
###############################################################


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg.pg_primary_only
#  ┃ PostgreSQL basic information (on primary)
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster primary]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 101
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 100000 ~ higher
#  ┃ Source   ┆ 101-pg.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ GAUGE    timestamp            database current timestamp
#  ┃ COUNTER  lsn                  log sequence number, current write location (on primary)
#  ┃ COUNTER  insert_lsn           primary only, location of current wal inserting
#  ┃ COUNTER  write_lsn            primary only, location of current wal writing
#  ┃ COUNTER  flush_lsn            primary only, location of current wal syncing
#  ┃ GAUGE    uptime               seconds since postmaster start
#  ┃ GAUGE    conf_reload_time     seconds since last configuration reload
#  ┃ GAUGE    is_in_backup         1 if backup is in progress
#  ┃ GAUGE    backup_time          seconds since current backup start. null if don't have one
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_timestamp{}
#  ┃ pg_lsn{}
#  ┃ pg_insert_lsn{}
#  ┃ pg_write_lsn{}
#  ┃ pg_flush_lsn{}
#  ┃ pg_uptime{}
#  ┃ pg_conf_reload_time{}
#  ┃ pg_is_in_backup{}
#  ┃ pg_backup_time{}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT extract(EPOCH FROM CURRENT_TIMESTAMP)                  AS timestamp,
#  ┃        pg_current_wal_lsn() - '0/0'                           AS lsn,
#  ┃        pg_current_wal_insert_lsn() - '0/0'                    AS insert_lsn,
#  ┃        pg_current_wal_lsn() - '0/0'                           AS write_lsn,
#  ┃        pg_current_wal_flush_lsn() - '0/0'                     AS flush_lsn,
#  ┃        extract(EPOCH FROM now() - pg_postmaster_start_time()) AS uptime,
#  ┃        extract(EPOCH FROM now() - pg_conf_load_time())        AS conf_reload_time,
#  ┃        pg_is_in_backup()                                      AS is_in_backup,
#  ┃        extract(EPOCH FROM now() - pg_backup_start_time())     AS backup_time;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_primary_only:
  name: pg
  desc: PostgreSQL basic information (on primary)
  query: |
    SELECT extract(EPOCH FROM CURRENT_TIMESTAMP)                  AS timestamp,
           pg_current_wal_lsn() - '0/0'                           AS lsn,
           pg_current_wal_insert_lsn() - '0/0'                    AS insert_lsn,
           pg_current_wal_lsn() - '0/0'                           AS write_lsn,
           pg_current_wal_flush_lsn() - '0/0'                     AS flush_lsn,
           extract(EPOCH FROM now() - pg_postmaster_start_time()) AS uptime,
           extract(EPOCH FROM now() - pg_conf_load_time())        AS conf_reload_time,
           pg_is_in_backup()                                      AS is_in_backup,
           extract(EPOCH FROM now() - pg_backup_start_time())     AS backup_time;

  ttl: 10
  timeout: 0.1
  tags: [cluster, primary]
  min_version: 100000
  max_version: 0
  fatal: false

  metrics:
    - timestamp:
        usage: GAUGE
        description: database current timestamp
    - lsn:
        usage: COUNTER
        description: log sequence number, current write location (on primary)
    - insert_lsn:
        usage: COUNTER
        description: primary only, location of current wal inserting
    - write_lsn:
        usage: COUNTER
        description: primary only, location of current wal writing
    - flush_lsn:
        usage: COUNTER
        description: primary only, location of current wal syncing
    - uptime:
        usage: GAUGE
        description: seconds since postmaster start
    - conf_reload_time:
        usage: GAUGE
        description: seconds since last configuration reload
    - is_in_backup:
        usage: GAUGE
        description: 1 if backup is in progress
    - backup_time:
        usage: GAUGE
        description: seconds since current backup start. null if don't have one




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg.pg_standby_only
#  ┃ PostgreSQL basic information (on standby)
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster standby]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 101
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 100000 ~ higher
#  ┃ Source   ┆ 101-pg.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ GAUGE    timestamp            database current timestamp
#  ┃ COUNTER  lsn                  log sequence number, current replay location (on standby)
#  ┃ COUNTER  receive_lsn          location of wal synced to disk (standby only)
#  ┃ COUNTER  replay_lsn           location of wal applied (on standby)
#  ┃ GAUGE    uptime               seconds since postmaster start
#  ┃ GAUGE    conf_reload_time     seconds since last configuration reload
#  ┃ GAUGE    last_replay_time     time when last transaction been replayed
#  ┃ GAUGE    lag                  replication lag in seconds from view of standby server
#  ┃ GAUGE    is_in_backup         1 if backup is in progress
#  ┃ GAUGE    backup_time          seconds since current backup start. null if don't have one
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_timestamp{}
#  ┃ pg_lsn{}
#  ┃ pg_receive_lsn{}
#  ┃ pg_replay_lsn{}
#  ┃ pg_uptime{}
#  ┃ pg_conf_reload_time{}
#  ┃ pg_last_replay_time{}
#  ┃ pg_lag{}
#  ┃ pg_is_in_backup{}
#  ┃ pg_backup_time{}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT extract(EPOCH FROM CURRENT_TIMESTAMP)                                    AS timestamp,
#  ┃        pg_last_wal_replay_lsn() - '0/0'                                         AS lsn,
#  ┃        pg_last_wal_receive_lsn() - '0/0'                                        AS receive_lsn,
#  ┃        pg_last_wal_replay_lsn() - '0/0'                                         AS replay_lsn,
#  ┃        extract(EPOCH FROM now() - pg_postmaster_start_time())                   AS uptime,
#  ┃        extract(EPOCH FROM now() - pg_conf_load_time())                          AS conf_reload_time,
#  ┃        extract(EPOCH FROM pg_last_xact_replay_timestamp())                      AS last_replay_time,
#  ┃        CASE WHEN pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn() THEN 0
#  ┃            ELSE EXTRACT(EPOCH FROM now() - pg_last_xact_replay_timestamp()) END AS lag,
#  ┃        pg_is_in_backup()                                                        AS is_in_backup,
#  ┃        extract(EPOCH FROM now() - pg_backup_start_time())                       AS backup_time;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_standby_only:
  name: pg
  desc: PostgreSQL basic information (on standby)
  query: |
    SELECT extract(EPOCH FROM CURRENT_TIMESTAMP)                                    AS timestamp,
           pg_last_wal_replay_lsn() - '0/0'                                         AS lsn,
           pg_last_wal_receive_lsn() - '0/0'                                        AS receive_lsn,
           pg_last_wal_replay_lsn() - '0/0'                                         AS replay_lsn,
           extract(EPOCH FROM now() - pg_postmaster_start_time())                   AS uptime,
           extract(EPOCH FROM now() - pg_conf_load_time())                          AS conf_reload_time,
           extract(EPOCH FROM pg_last_xact_replay_timestamp())                      AS last_replay_time,
           CASE WHEN pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn() THEN 0
               ELSE EXTRACT(EPOCH FROM now() - pg_last_xact_replay_timestamp()) END AS lag,
           pg_is_in_backup()                                                        AS is_in_backup,
           extract(EPOCH FROM now() - pg_backup_start_time())                       AS backup_time;

  ttl: 10
  tags: [cluster, standby]
  min_version: 100000
  max_version: 0
  fatal: false

  metrics:
    - timestamp:
        usage: GAUGE
        description: database current timestamp
    - lsn:
        usage: COUNTER
        description: log sequence number, current replay location (on standby)
    - receive_lsn:
        usage: COUNTER
        description: location of wal synced to disk (standby only)
    - replay_lsn:
        usage: COUNTER
        description: location of wal applied (on standby)
    - uptime:
        usage: GAUGE
        description: seconds since postmaster start
    - conf_reload_time:
        usage: GAUGE
        description: seconds since last configuration reload
    - last_replay_time:
        usage: GAUGE
        description: time when last transaction been replayed
    - lag:
        usage: GAUGE
        description: replication lag in seconds from view of standby server
    - is_in_backup:
        usage: GAUGE
        description: 1 if backup is in progress
    - backup_time:
        usage: GAUGE
        description: seconds since current backup start. null if don't have one


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_meta
#  ┃ PostgreSQL meta info (semi-constant)
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 102
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90600 ~ higher
#  ┃ Source   ┆ 102-pg_meta.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    cluster_id           cluster system identifier
#  ┃ LABEL    port                 listen port
#  ┃ LABEL    data_dir             data directory path
#  ┃ LABEL    conf_path            postgresql.conf path
#  ┃ LABEL    hba_path             pg_hba.conf path
#  ┃ LABEL    wal_level            wal level
#  ┃ LABEL    version              server version in human readable format
#  ┃ LABEL    ver_num              server version number in machine readable format
#  ┃ GAUGE    info                 constant 1
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_meta_info{cluster_id,port,data_dir,conf_path,hba_path,wal_level,version,ver_num}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT (SELECT system_identifier FROM pg_control_system()) AS cluster_id,
#  ┃        current_setting('port')                             AS port,
#  ┃        current_setting('data_directory')                   AS data_dir,
#  ┃        current_setting('config_file')                      AS conf_path,
#  ┃        current_setting('hba_file')                         AS hba_path,
#  ┃        current_setting('wal_level')                        AS wal_level,
#  ┃        current_setting('server_version')                   AS version,
#  ┃        current_setting('server_version_num')               AS ver_num,
#  ┃        1                                                   AS info
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_meta:
  name: pg_meta
  desc: PostgreSQL meta info (pg_control_system() is provisioned since 9.6)
  query: |
    SELECT (SELECT system_identifier FROM pg_control_system()) AS cluster_id,
           current_setting('port')                             AS port,
           current_setting('data_directory')                   AS data_dir,
           current_setting('config_file')                      AS conf_path,
           current_setting('hba_file')                         AS hba_path,
           current_setting('wal_level')                        AS wal_level,
           current_setting('server_version')                   AS version,
           current_setting('server_version_num')               AS ver_num,
           1                                                   AS info

  ttl: 100
  tags: [cluster]
  min_version: 090600

  metrics:
    - cluster_id:
        usage: LABEL
        description: cluster system identifier
    - port:
        usage: LABEL
        description: listen port
    - data_dir:
        usage: LABEL
        description: data directory path
    - conf_path:
        usage: LABEL
        description: postgresql.conf path
    - hba_path:
        usage: LABEL
        description: pg_hba.conf path
    - wal_level:
        usage: LABEL
        description: wal level
    - version:
        usage: LABEL
        description: server version in human readable format
    - ver_num:
        usage: LABEL
        description: server version number in machine readable format
    - info:
        usage: GAUGE
        description: constant 1

#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_bgwriter
#  ┃ PostgreSQL background writer metrics: https://www.postgresql.org/docs/12/monitoring-stats.html#PG-STAT-BGWRITER-VIEW
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 103
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 103-pg_bgwriter.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ COUNTER  checkpoints_timed    scheduled checkpoints that have been performed
#  ┃ COUNTER  checkpoints_req      requested checkpoints that have been performed
#  ┃ COUNTER  checkpoint_write_time time spending on writing files to disk, in µs
#  ┃ COUNTER  checkpoint_sync_time time spending on syncing files to disk, in µs
#  ┃ COUNTER  buffers_checkpoint   buffers written during checkpoints
#  ┃ COUNTER  buffers_clean        buffers written by the background writer
#  ┃ COUNTER  buffers_backend      buffers written directly by a backend
#  ┃ COUNTER  maxwritten_clean     times that bgwriter stopped a cleaning scan
#  ┃ COUNTER  buffers_backend_fsync times a backend had to execute its own fsync
#  ┃ COUNTER  buffers_alloc        buffers allocated
#  ┃ COUNTER  stats_reset          time when statistics were last reset
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_bgwriter_checkpoints_timed{}
#  ┃ pg_bgwriter_checkpoints_req{}
#  ┃ pg_bgwriter_checkpoint_write_time{}
#  ┃ pg_bgwriter_checkpoint_sync_time{}
#  ┃ pg_bgwriter_buffers_checkpoint{}
#  ┃ pg_bgwriter_buffers_clean{}
#  ┃ pg_bgwriter_buffers_backend{}
#  ┃ pg_bgwriter_maxwritten_clean{}
#  ┃ pg_bgwriter_buffers_backend_fsync{}
#  ┃ pg_bgwriter_buffers_alloc{}
#  ┃ pg_bgwriter_stats_reset{}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT checkpoints_timed,
#  ┃        checkpoints_req,
#  ┃        checkpoint_write_time,
#  ┃        checkpoint_sync_time,
#  ┃        buffers_checkpoint,
#  ┃        buffers_clean,
#  ┃        buffers_backend,
#  ┃        maxwritten_clean,
#  ┃        buffers_backend_fsync,
#  ┃        buffers_alloc,
#  ┃        stats_reset
#  ┃ FROM pg_stat_bgwriter;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_bgwriter:
  desc: "PostgreSQL background writer metrics: https://www.postgresql.org/docs/12/monitoring-stats.html#PG-STAT-BGWRITER-VIEW"
  query: |
    SELECT checkpoints_timed,
           checkpoints_req,
           checkpoint_write_time,
           checkpoint_sync_time,
           buffers_checkpoint,
           buffers_clean,
           buffers_backend,
           maxwritten_clean,
           buffers_backend_fsync,
           buffers_alloc,
           stats_reset
    FROM pg_stat_bgwriter;

  ttl: 10
  tags: [cluster]
  min_version: 090400

  metrics:
    - checkpoints_timed:
        usage: COUNTER
        description: scheduled checkpoints that have been performed
    - checkpoints_req:
        usage: COUNTER
        description: requested checkpoints that have been performed
    - checkpoint_write_time:
        usage: COUNTER
        description: time spending on writing files to disk, in µs
    - checkpoint_sync_time:
        usage: COUNTER
        description: time spending on syncing files to disk, in µs
    - buffers_checkpoint:
        usage: COUNTER
        description: buffers written during checkpoints
    - buffers_clean:
        usage: COUNTER
        description: buffers written by the background writer
    - buffers_backend:
        usage: COUNTER
        description: buffers written directly by a backend
    - maxwritten_clean:
        usage: COUNTER
        description: times that bgwriter stopped a cleaning scan
    - buffers_backend_fsync:
        usage: COUNTER
        description: times a backend had to execute its own fsync
    - buffers_alloc:
        usage: COUNTER
        description: buffers allocated
    - stats_reset:
        usage: COUNTER
        description: time when statistics were last reset

#-------------------------------------------------------------#
# pg_checkpoint
# pg control checkpoint
# 96 introduced 19 fields
# 10  checkpoint_location/prior_location/redo_location location to lsn
# 11 remove prior_lsn fields
#-------------------------------------------------------------#


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_checkpoint.pg_checkpoint_10
#  ┃ checkpoint information from pg_control_checkpoint since 10 (prior_lsn is not fetched)
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 104
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 100000 ~ higher
#  ┃ Source   ┆ 104-pg_checkpoint.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ COUNTER  checkpoint_lsn       lsn of checkpoint
#  ┃ COUNTER  redo_lsn             redo start LSN
#  ┃ GAUGE    tli                  current WAL timeline
#  ┃ GAUGE    prev_tli             previous WAL timeline
#  ┃ GAUGE    full_page_writes     is full page write enabled ?
#  ┃ GAUGE    next_xid_epoch       next xid epoch since this checkpoint
#  ┃ GAUGE    next_xid             next xid since this checkpoint
#  ┃ GAUGE    next_oid             next object id since this checkpoint
#  ┃ GAUGE    next_multixact_id    next multixact id of this checkpoint
#  ┃ GAUGE    next_multi_offset    next multixact id offset of this checkpoint
#  ┃ GAUGE    oldest_xid           oldest existing xid of the checkpoint
#  ┃ GAUGE    oldest_xid_dbid      which db contains the oldest xid
#  ┃ GAUGE    oldest_active_xid    oldest active xid of the checkpoint
#  ┃ GAUGE    oldest_multi_xid     oldest active multi xid of the checkpoint
#  ┃ GAUGE    oldest_multi_dbid    which db contins the oldest multi xid
#  ┃ GAUGE    oldest_commit_ts_xid xid with oldest commit ts by the checkpoint
#  ┃ GAUGE    newest_commit_ts_xid xid with newest commit ts by the checkpoint
#  ┃ GAUGE    time                 timestamp of this checkpoint
#  ┃ GAUGE    elapse               time elapsed since this checkpoint in seconds
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_checkpoint_checkpoint_lsn{}
#  ┃ pg_checkpoint_redo_lsn{}
#  ┃ pg_checkpoint_tli{}
#  ┃ pg_checkpoint_prev_tli{}
#  ┃ pg_checkpoint_full_page_writes{}
#  ┃ pg_checkpoint_next_xid_epoch{}
#  ┃ pg_checkpoint_next_xid{}
#  ┃ pg_checkpoint_next_oid{}
#  ┃ pg_checkpoint_next_multixact_id{}
#  ┃ pg_checkpoint_next_multi_offset{}
#  ┃ pg_checkpoint_oldest_xid{}
#  ┃ pg_checkpoint_oldest_xid_dbid{}
#  ┃ pg_checkpoint_oldest_active_xid{}
#  ┃ pg_checkpoint_oldest_multi_xid{}
#  ┃ pg_checkpoint_oldest_multi_dbid{}
#  ┃ pg_checkpoint_oldest_commit_ts_xid{}
#  ┃ pg_checkpoint_newest_commit_ts_xid{}
#  ┃ pg_checkpoint_time{}
#  ┃ pg_checkpoint_elapse{}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT checkpoint_lsn - '0/0'                      AS checkpoint_lsn,
#  ┃        redo_lsn - '0/0'                            AS redo_lsn,
#  ┃        timeline_id                                 AS tli,
#  ┃        prev_timeline_id                            AS prev_tli,
#  ┃        full_page_writes,
#  ┃        split_part(next_xid, ':', 1)                AS next_xid_epoch,
#  ┃        split_part(next_xid, ':', 2)                AS next_xid,
#  ┃        next_oid::BIGINT,
#  ┃        next_multixact_id::text::BIGINT,
#  ┃        next_multi_offset::text::BIGINT,
#  ┃        oldest_xid::text::BIGINT,
#  ┃        oldest_xid_dbid::text::BIGINT,
#  ┃        oldest_active_xid::text::BIGINT,
#  ┃        oldest_multi_xid::text::BIGINT,
#  ┃        oldest_multi_dbid::BIGINT,
#  ┃        oldest_commit_ts_xid::text::BIGINT,
#  ┃        newest_commit_ts_xid::text::BIGINT,
#  ┃        checkpoint_time                             AS time,
#  ┃        extract(epoch from now() - checkpoint_time) AS elapse
#  ┃ FROM pg_control_checkpoint();
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_checkpoint_10:
  name: pg_checkpoint
  desc: checkpoint information from pg_control_checkpoint since 10
  query: |
    SELECT checkpoint_lsn - '0/0'                      AS checkpoint_lsn,
           redo_lsn - '0/0'                            AS redo_lsn,
           timeline_id                                 AS tli,
           prev_timeline_id                            AS prev_tli,
           full_page_writes,
           split_part(next_xid, ':', 1)                AS next_xid_epoch,
           split_part(next_xid, ':', 2)                AS next_xid,
           next_oid::BIGINT,
           next_multixact_id::text::BIGINT,
           next_multi_offset::text::BIGINT,
           oldest_xid::text::BIGINT,
           oldest_xid_dbid::text::BIGINT,
           oldest_active_xid::text::BIGINT,
           oldest_multi_xid::text::BIGINT,
           oldest_multi_dbid::BIGINT,
           oldest_commit_ts_xid::text::BIGINT,
           newest_commit_ts_xid::text::BIGINT,
           checkpoint_time                             AS time,
           extract(epoch from now() - checkpoint_time) AS elapse
    FROM pg_control_checkpoint();

  ttl: 100
  tags: [cluster]
  min_version: 100000

  metrics:
    - checkpoint_lsn:
        usage: COUNTER
        description: lsn of checkpoint
    - redo_lsn:
        usage: COUNTER
        description: redo start LSN
    - tli:
        usage: GAUGE
        description: current WAL timeline
    - prev_tli:
        usage: GAUGE
        description: previous WAL timeline
    - full_page_writes:
        usage: GAUGE
        description: is full page write enabled ?
    - next_xid_epoch:
        usage: GAUGE
        description: next xid epoch since this checkpoint
    - next_xid:
        usage: GAUGE
        description: next xid since this checkpoint
    - next_oid:
        usage: GAUGE
        description: next object id since this checkpoint
    - next_multixact_id:
        usage: GAUGE
        description: next multixact id of this checkpoint
    - next_multi_offset:
        usage: GAUGE
        description: next multixact id offset of this checkpoint
    - oldest_xid:
        usage: GAUGE
        description: oldest existing xid of the checkpoint
    - oldest_xid_dbid:
        usage: GAUGE
        description: which db contains the oldest xid
    - oldest_active_xid:
        usage: GAUGE
        description: oldest active xid of the checkpoint
    - oldest_multi_xid:
        usage: GAUGE
        description: oldest active multi xid of the checkpoint
    - oldest_multi_dbid:
        usage: GAUGE
        description: which db contins the oldest multi xid
    - oldest_commit_ts_xid:
        usage: GAUGE
        description: xid with oldest commit ts by the checkpoint
    - newest_commit_ts_xid:
        usage: GAUGE
        description: xid with newest commit ts by the checkpoint
    - time:
        usage: GAUGE
        description: timestamp of this checkpoint
    - elapse:
        usage: GAUGE
        description: time elapsed since this checkpoint in seconds


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_checkpoint.pg_checkpoint_96
#  ┃ checkpoint information from pg_control_checkpoint on PostgreSQL 9.6: https://www.postgresql.org/docs/9.6/functions-info.html#FUNCTIONS-PG-CONTROL-CHECKPOINT
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 104
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90600 ~ 100000
#  ┃ Source   ┆ 104-pg_checkpoint.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ COUNTER  checkpoint_lsn       lsn of checkpoint
#  ┃ COUNTER  prior_lsn            prior checkpoint lsn
#  ┃ COUNTER  redo_lsn             redo start LSN
#  ┃ GAUGE    tli                  current WAL timeline
#  ┃ GAUGE    prev_tli             previous WAL timeline
#  ┃ GAUGE    full_page_writes     is full page write enabled ?
#  ┃ GAUGE    next_xid_epoch       next xid epoch since this checkpoint
#  ┃ GAUGE    next_xid             next xid since this checkpoint
#  ┃ GAUGE    next_oid             next object id since this checkpoint
#  ┃ GAUGE    next_multixact_id    next multixact id of this checkpoint
#  ┃ GAUGE    next_multi_offset    next multixact id offset of this checkpoint
#  ┃ GAUGE    oldest_xid           oldest existing xid of the checkpoint
#  ┃ GAUGE    oldest_xid_dbid      which db contains the oldest xid
#  ┃ GAUGE    oldest_active_xid    oldest active xid of the checkpoint
#  ┃ GAUGE    oldest_multi_xid     oldest active multi xid of the checkpoint
#  ┃ GAUGE    oldest_multi_dbid    which db contins the oldest multi xid
#  ┃ GAUGE    oldest_commit_ts_xid xid with oldest commit ts by the checkpoint
#  ┃ GAUGE    newest_commit_ts_xid xid with newest commit ts by the checkpoint
#  ┃ GAUGE    time                 timestamp of this checkpoint
#  ┃ GAUGE    elapse               time elapsed since this checkpoint in seconds
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_checkpoint_checkpoint_lsn{}
#  ┃ pg_checkpoint_prior_lsn{}
#  ┃ pg_checkpoint_redo_lsn{}
#  ┃ pg_checkpoint_tli{}
#  ┃ pg_checkpoint_prev_tli{}
#  ┃ pg_checkpoint_full_page_writes{}
#  ┃ pg_checkpoint_next_xid_epoch{}
#  ┃ pg_checkpoint_next_xid{}
#  ┃ pg_checkpoint_next_oid{}
#  ┃ pg_checkpoint_next_multixact_id{}
#  ┃ pg_checkpoint_next_multi_offset{}
#  ┃ pg_checkpoint_oldest_xid{}
#  ┃ pg_checkpoint_oldest_xid_dbid{}
#  ┃ pg_checkpoint_oldest_active_xid{}
#  ┃ pg_checkpoint_oldest_multi_xid{}
#  ┃ pg_checkpoint_oldest_multi_dbid{}
#  ┃ pg_checkpoint_oldest_commit_ts_xid{}
#  ┃ pg_checkpoint_newest_commit_ts_xid{}
#  ┃ pg_checkpoint_time{}
#  ┃ pg_checkpoint_elapse{}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT checkpoint_location - '0/0'                 AS checkpoint_lsn,
#  ┃        prior_location - '0/0'                      AS prior_lsn,
#  ┃        redo_location - '0/0'                       AS redo_lsn,
#  ┃        timeline_id                                 AS tli,
#  ┃        prev_timeline_id                            AS prev_tli,
#  ┃        full_page_writes,
#  ┃        split_part(next_xid, ':', 1)                AS next_xid_epoch,
#  ┃        split_part(next_xid, ':', 2)                AS next_xid,
#  ┃        next_oid::BIGINT,
#  ┃        next_multixact_id::text::BIGINT,
#  ┃        next_multi_offset::text::BIGINT,
#  ┃        oldest_xid::text::BIGINT,
#  ┃        oldest_xid_dbid::text::BIGINT,
#  ┃        oldest_active_xid::text::BIGINT,
#  ┃        oldest_multi_xid::text::BIGINT,
#  ┃        oldest_multi_dbid::BIGINT,
#  ┃        oldest_commit_ts_xid::text::BIGINT,
#  ┃        newest_commit_ts_xid::text::BIGINT,
#  ┃        checkpoint_time                             AS time,
#  ┃        extract(epoch from now() - checkpoint_time) AS elapse
#  ┃ FROM pg_control_checkpoint();
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_checkpoint_96:
  name: pg_checkpoint
  desc: "checkpoint information from pg_control_checkpoint on PostgreSQL 9.6: https://www.postgresql.org/docs/9.6/functions-info.html#FUNCTIONS-PG-CONTROL-CHECKPOINT"
  query: |
    SELECT checkpoint_location - '0/0'                 AS checkpoint_lsn,
           prior_location - '0/0'                      AS prior_lsn,
           redo_location - '0/0'                       AS redo_lsn,
           timeline_id                                 AS tli,
           prev_timeline_id                            AS prev_tli,
           full_page_writes,
           split_part(next_xid, ':', 1)                AS next_xid_epoch,
           split_part(next_xid, ':', 2)                AS next_xid,
           next_oid::BIGINT,
           next_multixact_id::text::BIGINT,
           next_multi_offset::text::BIGINT,
           oldest_xid::text::BIGINT,
           oldest_xid_dbid::text::BIGINT,
           oldest_active_xid::text::BIGINT,
           oldest_multi_xid::text::BIGINT,
           oldest_multi_dbid::BIGINT,
           oldest_commit_ts_xid::text::BIGINT,
           newest_commit_ts_xid::text::BIGINT,
           checkpoint_time                             AS time,
           extract(epoch from now() - checkpoint_time) AS elapse
    FROM pg_control_checkpoint();

  ttl: 100
  tags: [cluster]
  min_version: 090600
  max_version: 100000

  metrics:
    - checkpoint_lsn:
        usage: COUNTER
        description: lsn of checkpoint
    - prior_lsn:
        usage: COUNTER
        description: prior checkpoint lsn
    - redo_lsn:
        usage: COUNTER
        description: redo start LSN
    - tli:
        usage: GAUGE
        description: current WAL timeline
    - prev_tli:
        usage: GAUGE
        description: previous WAL timeline
    - full_page_writes:
        usage: GAUGE
        description: is full page write enabled ?
    - next_xid_epoch:
        usage: GAUGE
        description: next xid epoch since this checkpoint
    - next_xid:
        usage: GAUGE
        description: next xid since this checkpoint
    - next_oid:
        usage: GAUGE
        description: next object id since this checkpoint
    - next_multixact_id:
        usage: GAUGE
        description: next multixact id of this checkpoint
    - next_multi_offset:
        usage: GAUGE
        description: next multixact id offset of this checkpoint
    - oldest_xid:
        usage: GAUGE
        description: oldest existing xid of the checkpoint
    - oldest_xid_dbid:
        usage: GAUGE
        description: which db contains the oldest xid
    - oldest_active_xid:
        usage: GAUGE
        description: oldest active xid of the checkpoint
    - oldest_multi_xid:
        usage: GAUGE
        description: oldest active multi xid of the checkpoint
    - oldest_multi_dbid:
        usage: GAUGE
        description: which db contins the oldest multi xid
    - oldest_commit_ts_xid:
        usage: GAUGE
        description: xid with oldest commit ts by the checkpoint
    - newest_commit_ts_xid:
        usage: GAUGE
        description: xid with newest commit ts by the checkpoint
    - time:
        usage: GAUGE
        description: timestamp of this checkpoint
    - elapse:
        usage: GAUGE
        description: time elapsed since this checkpoint in seconds

#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_recovery
#  ┃ PostgreSQL control recovery metrics since 9.6
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster standby]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 105
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90600 ~ higher
#  ┃ Source   ┆ 105-pg_recovery.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ COUNTER  min_timeline         pg control recovery min timeline
#  ┃ COUNTER  min_lsn              pg control recovery min lsn
#  ┃ COUNTER  backup_start_lsn     pg control recovery backup start lsn
#  ┃ COUNTER  backup_end_lsn       pg control recovery backup end lsn
#  ┃ GAUGE    require_record       do recovery need a end of backup record
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_recovery_min_timeline{}
#  ┃ pg_recovery_min_lsn{}
#  ┃ pg_recovery_backup_start_lsn{}
#  ┃ pg_recovery_backup_end_lsn{}
#  ┃ pg_recovery_require_record{}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT min_recovery_end_timeline    AS min_timeline,
#  ┃        min_recovery_end_lsn - '0/0' AS min_lsn,
#  ┃        backup_start_lsn - '0/0'     AS backup_start_lsn,
#  ┃        backup_end_lsn - '0/0'       AS backup_end_lsn,
#  ┃        end_of_backup_record_required AS require_record
#  ┃ FROM pg_control_recovery();
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_recovery:
  name: pg_recovery
  desc: PostgreSQL control recovery metrics since 9.6

  query: |
    SELECT min_recovery_end_timeline    AS min_timeline,
           min_recovery_end_lsn - '0/0' AS min_lsn,
           backup_start_lsn - '0/0'     AS backup_start_lsn,
           backup_end_lsn - '0/0'       AS backup_end_lsn,
           end_of_backup_record_required AS require_record
    FROM pg_control_recovery();

  ttl: 100
  tags: [cluster, standby]
  min_version: 090600

  metrics:
    - min_timeline:
        usage: COUNTER
        description: pg control recovery min timeline
    - min_lsn:
        usage: COUNTER
        description: pg control recovery min lsn
    - backup_start_lsn:
        usage: COUNTER
        description: pg control recovery backup start lsn
    - backup_end_lsn:
        usage: COUNTER
        description: pg control recovery backup end lsn
    - require_record:
        usage: GAUGE
        description: do recovery need a end of backup record

#-------------------------------------------------------------#
# pg_standby
# pg_stat_wal_receiver is introduced in 9.6
# add 2 new fields sender host/port in 11
# https://www.postgresql.org/docs/12/monitoring-stats.html#PG-STAT-WAL-RECEIVER-VIEW
#-------------------------------------------------------------#


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_standby.pg_standby_11
#  ┃ PostgreSQL walreceiver metrics since 11 (add sender host and port)
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster standby]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 106
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 110000 ~ higher
#  ┃ Source   ┆ 106-pg_standby.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    pid                  pid of the WAL receiver process
#  ┃ LABEL    status               status of the WAL receiver process
#  ┃ LABEL    host                 location this WAL receiver is connected to
#  ┃ LABEL    port                 location port number this WAL receiver is connected to
#  ┃ LABEL    slot_name            Replication slot name used by this WAL receiver
#  ┃ COUNTER  init_lsn             first time received lsn when WAL receiver is started
#  ┃ GAUGE    init_tli             first time received timeline number when WAL receiver is started
#  ┃ COUNTER  last_lsn             latest lsn that already flushed to standby disk
#  ┃ GAUGE    last_tli             latest timeline that already flushed to standby disk
#  ┃ GAUGE    send_ts              send time of last message received from origin WAL sender
#  ┃ GAUGE    receive_ts           receipt time of last message received from origin WAL sender
#  ┃ COUNTER  report_lsn           with time zone	Time of last write-ahead log location reported to origin WAL sender
#  ┃ GAUGE    report_ts            timestamp of last time reporting to sender
#  ┃ GAUGE    current_ts           current_timestamp
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_standby_init_lsn{pid,status,host,port,slot_name}
#  ┃ pg_standby_init_tli{pid,status,host,port,slot_name}
#  ┃ pg_standby_last_lsn{pid,status,host,port,slot_name}
#  ┃ pg_standby_last_tli{pid,status,host,port,slot_name}
#  ┃ pg_standby_send_ts{pid,status,host,port,slot_name}
#  ┃ pg_standby_receive_ts{pid,status,host,port,slot_name}
#  ┃ pg_standby_report_lsn{pid,status,host,port,slot_name}
#  ┃ pg_standby_report_ts{pid,status,host,port,slot_name}
#  ┃ pg_standby_current_ts{pid,status,host,port,slot_name}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT pid,
#  ┃        status,
#  ┃        coalesce(sender_host, (regexp_match(conninfo, '.*host=(\S+).*'))[1])       AS host,
#  ┃        coalesce(sender_port::TEXT, (regexp_match(conninfo, '.*port=(\S+).*'))[1]) AS port,
#  ┃        slot_name,
#  ┃        receive_start_lsn - '0/0'                                                  AS init_lsn,
#  ┃        receive_start_tli                                                          AS init_tli,
#  ┃        received_lsn - '0/0'                                                       AS last_lsn,
#  ┃        received_tli                                                               AS last_tli,
#  ┃        last_msg_send_time                                                         AS send_ts,
#  ┃        last_msg_receipt_time                                                      AS receive_ts,
#  ┃        latest_end_lsn - '0/0'                                                     AS report_lsn,
#  ┃        latest_end_time                                                            AS report_ts,
#  ┃        now()                                                                      AS current_ts
#  ┃ FROM pg_stat_wal_receiver;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_standby_11:
  name: pg_standby
  desc: PostgreSQL walreceiver metrics since 11 (add sender host and port)

  query: |
    SELECT pid,
           status,
           coalesce(sender_host, (regexp_match(conninfo, '.*host=(\S+).*'))[1])       AS host,
           coalesce(sender_port::TEXT, (regexp_match(conninfo, '.*port=(\S+).*'))[1]) AS port,
           slot_name,
           receive_start_lsn - '0/0'                                                  AS init_lsn,
           receive_start_tli                                                          AS init_tli,
           received_lsn - '0/0'                                                       AS last_lsn,
           received_tli                                                               AS last_tli,
           last_msg_send_time                                                         AS send_ts,
           last_msg_receipt_time                                                      AS receive_ts,
           latest_end_lsn - '0/0'                                                     AS report_lsn,
           latest_end_time                                                            AS report_ts,
           now()                                                                      AS current_ts
    FROM pg_stat_wal_receiver;

  ttl: 10
  tags: [cluster, standby]
  min_version: 110000

  metrics:
    - pid:
        usage: LABEL
        description: pid of the WAL receiver process
    - status:
        usage: LABEL
        description: status of the WAL receiver process
    - host:
        usage: LABEL
        description:  location this WAL receiver is connected to
    - port:
        usage: LABEL
        description:  location port number this WAL receiver is connected to
    - slot_name:
        usage: LABEL
        description:  Replication slot name used by this WAL receiver
    - init_lsn:
        usage: COUNTER
        description: first time received lsn when WAL receiver is started
    - init_tli:
        usage: GAUGE
        description: first time received timeline number when WAL receiver is started
    - last_lsn:
        usage: COUNTER
        description: latest lsn that already flushed to standby disk
    - last_tli:
        usage: GAUGE
        description: latest timeline that already flushed to standby disk
    - send_ts:
        usage: GAUGE
        description: send time of last message received from origin WAL sender
    - receive_ts:
        usage: GAUGE
        description: receipt time of last message received from origin WAL sender
    - report_lsn:
        usage: COUNTER
        description: with time zone	Time of last write-ahead log location reported to origin WAL sender
    - report_ts:
        usage: GAUGE
        description: timestamp of last time reporting to sender
    - current_ts:
        usage: GAUGE
        description: current_timestamp



#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_standby.pg_standby_96
#  ┃ PostgreSQL walreceiver metrics 9.6~10: https://www.postgresql.org/docs/9.6/monitoring-stats.html#PG-STAT-WAL-RECEIVER-VIEW
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster standby]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 106
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90600 ~ 110000
#  ┃ Source   ┆ 106-pg_standby.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    pid                  pid of the WAL receiver process
#  ┃ LABEL    status               status of the WAL receiver process
#  ┃ LABEL    host                 location this WAL receiver is connected to
#  ┃ LABEL    port                 location port number this WAL receiver is connected to
#  ┃ LABEL    slot_name            Replication slot name used by this WAL receiver
#  ┃ COUNTER  init_lsn             first time received lsn when WAL receiver is started
#  ┃ GAUGE    init_tli             first time received timeline number when WAL receiver is started
#  ┃ COUNTER  last_lsn             latest lsn that already flushed to standby disk
#  ┃ GAUGE    last_tli             latest timeline that already flushed to standby disk
#  ┃ GAUGE    send_ts              send time of last message received from origin WAL sender
#  ┃ GAUGE    receive_ts           receipt time of last message received from origin WAL sender
#  ┃ COUNTER  report_lsn           with time zone	Time of last write-ahead log location reported to origin WAL sender
#  ┃ GAUGE    report_ts            timestamp of last time reporting to sender
#  ┃ GAUGE    current_ts           current_timestamp
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_standby_init_lsn{pid,status,host,port,slot_name}
#  ┃ pg_standby_init_tli{pid,status,host,port,slot_name}
#  ┃ pg_standby_last_lsn{pid,status,host,port,slot_name}
#  ┃ pg_standby_last_tli{pid,status,host,port,slot_name}
#  ┃ pg_standby_send_ts{pid,status,host,port,slot_name}
#  ┃ pg_standby_receive_ts{pid,status,host,port,slot_name}
#  ┃ pg_standby_report_lsn{pid,status,host,port,slot_name}
#  ┃ pg_standby_report_ts{pid,status,host,port,slot_name}
#  ┃ pg_standby_current_ts{pid,status,host,port,slot_name}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT pid,
#  ┃        status,
#  ┃        (regexp_match(conninfo, '.*host=(\S+).*'))[1] AS host,
#  ┃        (regexp_match(conninfo, '.*port=(\S+).*'))[1] AS port,
#  ┃        slot_name,
#  ┃        receive_start_lsn - '0/0'                     AS init_lsn,
#  ┃        receive_start_tli                             AS init_tli,
#  ┃        received_lsn - '0/0'                          AS last_lsn,
#  ┃        received_tli                                  AS last_tli,
#  ┃        last_msg_send_time                            AS send_ts,
#  ┃        last_msg_receipt_time                         AS receive_ts,
#  ┃        latest_end_lsn - '0/0'                        AS report_lsn,
#  ┃        latest_end_time                               AS report_ts,
#  ┃        now()                                         AS current_ts
#  ┃ FROM pg_stat_wal_receiver;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_standby_96:
  name: pg_standby
  desc: "PostgreSQL walreceiver metrics 9.6~10: https://www.postgresql.org/docs/9.6/monitoring-stats.html#PG-STAT-WAL-RECEIVER-VIEW"

  query: |
    SELECT pid,
           status,
           (regexp_match(conninfo, '.*host=(\S+).*'))[1] AS host,
           (regexp_match(conninfo, '.*port=(\S+).*'))[1] AS port,
           slot_name,
           receive_start_lsn - '0/0'                     AS init_lsn,
           receive_start_tli                             AS init_tli,
           received_lsn - '0/0'                          AS last_lsn,
           received_tli                                  AS last_tli,
           last_msg_send_time                            AS send_ts,
           last_msg_receipt_time                         AS receive_ts,
           latest_end_lsn - '0/0'                        AS report_lsn,
           latest_end_time                               AS report_ts,
           now()                                         AS current_ts
    FROM pg_stat_wal_receiver;

  ttl: 10
  tags: [cluster, standby]
  min_version: 090600
  max_version: 110000

  metrics:
    - pid:
        usage: LABEL
        description: pid of the WAL receiver process
    - status:
        usage: LABEL
        description: status of the WAL receiver process
    - host:
        usage: LABEL
        description:  location this WAL receiver is connected to
    - port:
        usage: LABEL
        description:  location port number this WAL receiver is connected to
    - slot_name:
        usage: LABEL
        description:  Replication slot name used by this WAL receiver
    - init_lsn:
        usage: COUNTER
        description: first time received lsn when WAL receiver is started
    - init_tli:
        usage: GAUGE
        description: first time received timeline number when WAL receiver is started
    - last_lsn:
        usage: COUNTER
        description: latest lsn that already flushed to standby disk
    - last_tli:
        usage: GAUGE
        description: latest timeline that already flushed to standby disk
    - send_ts:
        usage: GAUGE
        description: send time of last message received from origin WAL sender
    - receive_ts:
        usage: GAUGE
        description: receipt time of last message received from origin WAL sender
    - report_lsn:
        usage: COUNTER
        description: with time zone	Time of last write-ahead log location reported to origin WAL sender
    - report_ts:
        usage: GAUGE
        description: timestamp of last time reporting to sender
    - current_ts:
        usage: GAUGE
        description: current_timestamp

#-------------------------------------------------------------#
# pg_repl
# replication metrics
# 9.4~9.6 does not have write_lag, replay_lag, flush_lag
#-------------------------------------------------------------#

#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_repl.pg_repl_10
#  ┃ PostgreSQL replication metrics 10~12: https://www.postgresql.org/docs/12/monitoring-stats.html#PG-STAT-REPLICATION-VIEW
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 107
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 100000 ~ higher
#  ┃ Source   ┆ 107-pg_repl.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    pid                  unique walsender pid
#  ┃ LABEL    client_addr          client address of wal receiver
#  ┃ LABEL    application_name     application name of standby
#  ┃ LABEL    state                replication state startup|catchup|streaming|backup|stopping
#  ┃ COUNTER  lsn                  current log position on this server
#  ┃ COUNTER  sent_lsn             last log position sent to this standby server
#  ┃ COUNTER  write_lsn            last log position written to disk by this standby server
#  ┃ COUNTER  flush_lsn            last log position flushed to disk by this standby server
#  ┃ COUNTER  replay_lsn           last log position replayed into the database on this standby server
#  ┃ GAUGE    write_lag            latest ACK lsn diff with write (sync-remote-write lag)
#  ┃ GAUGE    flush_lag            latest ACK lsn diff with flush (sync-remote-flush lag)
#  ┃ GAUGE    replay_lag           latest ACK lsn diff with replay (sync-remote-apply lag)
#  ┃ GAUGE    backend_uptime       how long since standby connect to this server
#  ┃ GAUGE    backend_xmin         this standby's xmin horizon reported by hot_standby_feedback.
#  ┃ GAUGE    sync_priority        priority of being chosen as synchronous standby
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_repl_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_sent_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_write_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_flush_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_replay_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_write_lag{pid,client_addr,application_name,state}
#  ┃ pg_repl_flush_lag{pid,client_addr,application_name,state}
#  ┃ pg_repl_replay_lag{pid,client_addr,application_name,state}
#  ┃ pg_repl_backend_uptime{pid,client_addr,application_name,state}
#  ┃ pg_repl_backend_xmin{pid,client_addr,application_name,state}
#  ┃ pg_repl_sync_priority{pid,client_addr,application_name,state}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT pid,
#  ┃   client_addr,
#  ┃   application_name,
#  ┃   state,
#  ┃   CASE WHEN pg_is_in_recovery()
#  ┃   THEN pg_last_wal_replay_lsn()
#  ┃   ELSE pg_current_wal_lsn() END - '0/0' AS lsn,
#  ┃   sent_lsn - '0/0'                          AS sent_lsn,
#  ┃   write_lsn - '0/0'                         AS write_lsn,
#  ┃   flush_lsn - '0/0'                         AS flush_lsn,
#  ┃   replay_lsn - '0/0'                        AS replay_lsn,
#  ┃   extract(EPOCH FROM write_lag)             AS write_lag,
#  ┃   extract(EPOCH FROM flush_lag)             AS flush_lag,
#  ┃   extract(EPOCH FROM replay_lag)            AS replay_lag,
#  ┃   extract(EPOCH FROM now() - backend_start) AS backend_uptime,
#  ┃   backend_xmin::TEXT::BIGINT                AS backend_xmin,
#  ┃   sync_priority
#  ┃   FROM pg_stat_replication;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_repl_10:
  name: pg_repl
  desc: "PostgreSQL replication metrics 10~12: https://www.postgresql.org/docs/12/monitoring-stats.html#PG-STAT-REPLICATION-VIEW"

  query: |
    SELECT pid,
      client_addr,
      application_name,
      state,
      CASE WHEN pg_is_in_recovery()
      THEN pg_last_wal_replay_lsn()
      ELSE pg_current_wal_lsn() END - '0/0' AS lsn,
      sent_lsn - '0/0'                          AS sent_lsn,
      write_lsn - '0/0'                         AS write_lsn,
      flush_lsn - '0/0'                         AS flush_lsn,
      replay_lsn - '0/0'                        AS replay_lsn,
      extract(EPOCH FROM write_lag)             AS write_lag,
      extract(EPOCH FROM flush_lag)             AS flush_lag,
      extract(EPOCH FROM replay_lag)            AS replay_lag,
      extract(EPOCH FROM now() - backend_start) AS backend_uptime,
      backend_xmin::TEXT::BIGINT                AS backend_xmin,
      sync_priority
      FROM pg_stat_replication;

  ttl: 10
  tags: [cluster]
  min_version: 100000


  metrics:
    - pid:
        usage: LABEL
        description: unique walsender pid
    - client_addr:
        usage: LABEL
        description: client address of wal receiver
    - application_name:
        usage: LABEL
        description: application name of standby
    - state:
        usage: LABEL
        description: replication state startup|catchup|streaming|backup|stopping
    - lsn:
        usage: COUNTER
        description: current log position on this server
    - sent_lsn:
        usage: COUNTER
        description: last log position sent to this standby server
    - write_lsn:
        usage: COUNTER
        description: last log position written to disk by this standby server
    - flush_lsn:
        usage: COUNTER
        description: last log position flushed to disk by this standby server
    - replay_lsn:
        usage: COUNTER
        description: last log position replayed into the database on this standby server
    - write_lag:
        usage: GAUGE
        description: latest ACK lsn diff with write (sync-remote-write lag)
    - flush_lag:
        usage: GAUGE
        description: latest ACK lsn diff with flush (sync-remote-flush lag)
    - replay_lag:
        usage: GAUGE
        description: latest ACK lsn diff with replay (sync-remote-apply lag)
    - backend_uptime:
        usage: GAUGE
        description: how long since standby connect to this server
    - backend_xmin:
        usage: GAUGE
        description: this standby's xmin horizon reported by hot_standby_feedback.
    - sync_priority:
        usage: GAUGE
        description: priority of being chosen as synchronous standby



#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_repl.pg_repl_94
#  ┃ PostgreSQL replication metrics 9.4~9.6: https://www.postgresql.org/docs/9.4/monitoring-stats.html#PG-STAT-REPLICATION-VIEW
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 107
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ 100000
#  ┃ Source   ┆ 107-pg_repl.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    pid                  unique walsender pid
#  ┃ LABEL    client_addr          client address of wal receiver
#  ┃ LABEL    application_name     application name of standby
#  ┃ LABEL    state                replication state startup|catchup|streaming|backup|stopping
#  ┃ COUNTER  lsn                  current log position on this server
#  ┃ COUNTER  sent_lsn             last log position sent to this standby server
#  ┃ COUNTER  write_lsn            last log position written to disk by this standby server
#  ┃ COUNTER  flush_lsn            last log position flushed to disk by this standby server
#  ┃ COUNTER  replay_lsn           last log position replayed into the database on this standby server
#  ┃ GAUGE    backend_uptime       how long since standby connect to this server
#  ┃ GAUGE    backend_xmin         this standby's xmin horizon reported by hot_standby_feedback.
#  ┃ GAUGE    sync_priority        priority of being chosen as synchronous standby
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_repl_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_sent_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_write_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_flush_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_replay_lsn{pid,client_addr,application_name,state}
#  ┃ pg_repl_backend_uptime{pid,client_addr,application_name,state}
#  ┃ pg_repl_backend_xmin{pid,client_addr,application_name,state}
#  ┃ pg_repl_sync_priority{pid,client_addr,application_name,state}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT pid,
#  ┃   client_addr,
#  ┃   application_name,
#  ┃   state,
#  ┃   CASE WHEN pg_is_in_recovery()
#  ┃   THEN pg_last_xlog_replay_location()
#  ┃   ELSE pg_current_wal_lsn() END - '0/0' AS lsn,
#  ┃   sent_lsn - '0/0'                          AS sent_lsn,
#  ┃   write_lsn - '0/0'                         AS write_lsn,
#  ┃   flush_lsn - '0/0'                         AS flush_lsn,
#  ┃   replay_lsn - '0/0'                        AS replay_lsn,
#  ┃   extract(EPOCH FROM now() - backend_start) AS backend_uptime,
#  ┃   backend_xmin::TEXT::BIGINT                AS backend_xmin,
#  ┃   sync_priority
#  ┃   FROM pg_stat_replication;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_repl_94:
  name: pg_repl
  desc: "PostgreSQL replication metrics 9.4~9.6: https://www.postgresql.org/docs/9.4/monitoring-stats.html#PG-STAT-REPLICATION-VIEW"
  query: |
    SELECT pid,
      client_addr,
      application_name,
      state,
      CASE WHEN pg_is_in_recovery()
      THEN pg_last_xlog_replay_location()
      ELSE pg_current_wal_lsn() END - '0/0' AS lsn,
      sent_lsn - '0/0'                          AS sent_lsn,
      write_lsn - '0/0'                         AS write_lsn,
      flush_lsn - '0/0'                         AS flush_lsn,
      replay_lsn - '0/0'                        AS replay_lsn,
      extract(EPOCH FROM now() - backend_start) AS backend_uptime,
      backend_xmin::TEXT::BIGINT                AS backend_xmin,
      sync_priority
      FROM pg_stat_replication;

  ttl: 10
  tags: [cluster]
  min_version: 090400
  max_version: 100000

  metrics:
    - pid:
        usage: LABEL
        description: unique walsender pid
    - client_addr:
        usage: LABEL
        description: client address of wal receiver
    - application_name:
        usage: LABEL
        description: application name of standby
    - state:
        usage: LABEL
        description: replication state startup|catchup|streaming|backup|stopping
    - lsn:
        usage: COUNTER
        description: current log position on this server
    - sent_lsn:
        usage: COUNTER
        description: last log position sent to this standby server
    - write_lsn:
        usage: COUNTER
        description: last log position written to disk by this standby server
    - flush_lsn:
        usage: COUNTER
        description: last log position flushed to disk by this standby server
    - replay_lsn:
        usage: COUNTER
        description: last log position replayed into the database on this standby server
    - backend_uptime:
        usage: GAUGE
        description: how long since standby connect to this server
    - backend_xmin:
        usage: GAUGE
        description: this standby's xmin horizon reported by hot_standby_feedback.
    - sync_priority:
        usage: GAUGE
        description: priority of being chosen as synchronous standby



#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_repl_state
#  ┃ PostgreSQL replication client count group by state
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 108
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 108-pg_repl_state.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    state                replication state startup|catchup|streaming|backup|stopping
#  ┃ GAUGE    count                count of corresponding replication state
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_repl_state_count{state}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT l.state, coalesce(count, 0 ) AS count
#  ┃ FROM unnest(ARRAY ['streaming','startup','catchup', 'backup', 'stopping']) l(state)
#  ┃ LEFT JOIN (SELECT state, count(*) AS count FROM pg_stat_replication GROUP BY state)r ON l.state =  r.state
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_repl_state:
  name: pg_repl_state
  desc: PostgreSQL replication client count group by state

  query: |
    SELECT l.state, coalesce(count, 0 ) AS count
    FROM unnest(ARRAY ['streaming','startup','catchup', 'backup', 'stopping']) l(state)
    LEFT JOIN (SELECT state, count(*) AS count FROM pg_stat_replication GROUP BY state)r ON l.state =  r.state

  ttl: 10
  tags: [cluster]
  min_version: 090400

  metrics:
    - state:
        usage: LABEL
        description: replication state startup|catchup|streaming|backup|stopping
    - count:
        usage: GAUGE
        description: count of corresponding replication state


#-------------------------------------------------------------#
# pg_slot
# replication slots
# https://www.postgresql.org/docs/12/view-pg-replication-slots.html
# 9.4 has 9 fields: slot_name, plugin, slot_type, datoid, database, active, xmin, catalog_xmin, restart_lsn
# 9.5 add 1: active_pid
# 9.6 add 1: confirmed_flush_lsn
# 10  add 1: temporary
# 10 - 12 : fixed 12 fields
#-------------------------------------------------------------#



#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_slot.pg_slot_10
#  ┃ PostgreSQL replication slot metrics 10+
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 109
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 100000 ~ higher
#  ┃ Source   ┆ 109-pg_slot.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    slot_name            replication slot name
#  ┃ LABEL    datname              associated database name, only logical slot have this
#  ┃ GAUGE    active               whether the slot is currently being used
#  ┃ GAUGE    temporary            whether the slot is a temporary replication slot
#  ┃ GAUGE    xmin                 oldest txid that this slot needs the database to retain
#  ┃ GAUGE    catalog_xmin         oldest txid that this slot needs the database to retain for catalog
#  ┃ COUNTER  restart_lsn          lsn that needs retain, wal after that will be kept
#  ┃ COUNTER  confirm_lsn          lsn that confirmed by logical standby, null for physical slot
#  ┃ GAUGE    retained_bytes       bytes retained for this slot
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_slot_active{slot_name,datname}
#  ┃ pg_slot_temporary{slot_name,datname}
#  ┃ pg_slot_xmin{slot_name,datname}
#  ┃ pg_slot_catalog_xmin{slot_name,datname}
#  ┃ pg_slot_restart_lsn{slot_name,datname}
#  ┃ pg_slot_confirm_lsn{slot_name,datname}
#  ┃ pg_slot_retained_bytes{slot_name,datname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT slot_name,
#  ┃   database                    AS datname,
#  ┃   active,
#  ┃   temporary,
#  ┃   xmin::TEXT::BIGINT          AS xmin,
#  ┃   catalog_xmin::TEXT::BIGINT  AS catalog_xmin,
#  ┃   restart_lsn - '0/0'         AS restart_lsn,
#  ┃   confirmed_flush_lsn - '0/0' AS confirm_lsn,
#  ┃   CASE WHEN pg_is_in_recovery()
#  ┃   THEN pg_last_wal_replay_lsn()
#  ┃   ELSE pg_current_wal_lsn() END - restart_lsn
#  ┃   AS retained_bytes
#  ┃ FROM pg_replication_slots;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_slot_10:
  name: pg_slot
  desc: PostgreSQL replication slot metrics 10+
  query: |
    SELECT slot_name,
      database                    AS datname,
      active,
      temporary,
      xmin::TEXT::BIGINT          AS xmin,
      catalog_xmin::TEXT::BIGINT  AS catalog_xmin,
      restart_lsn - '0/0'         AS restart_lsn,
      confirmed_flush_lsn - '0/0' AS confirm_lsn,
      CASE WHEN pg_is_in_recovery()
      THEN pg_last_wal_replay_lsn()
      ELSE pg_current_wal_lsn() END - restart_lsn
      AS retained_bytes
    FROM pg_replication_slots;

  ttl: 10
  tags: [cluster]
  min_version: 100000

  metrics:
    - slot_name:
        usage: LABEL
        description: replication slot name
    - datname:
        usage: LABEL
        description: associated database name, only logical slot have this
    - active:
        usage: GAUGE
        description: whether the slot is currently being used
    - temporary:
        usage: GAUGE
        description: whether the slot is a temporary replication slot
    - xmin:
        usage: GAUGE
        description: oldest txid that this slot needs the database to retain
    - catalog_xmin:
        usage: GAUGE
        description: oldest txid that this slot needs the database to retain for catalog
    - restart_lsn:
        usage: COUNTER
        description: lsn that needs retain, wal after that will be kept
    - confirm_lsn:
        usage: COUNTER
        description: lsn that confirmed by logical standby, null for physical slot
    - retained_bytes:
        usage: GAUGE
        description: bytes retained for this slot

#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_slot.pg_slot_96
#  ┃ PostgreSQL replication slot metrics for 9.6
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 109
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90600 ~ 100000
#  ┃ Source   ┆ 109-pg_slot.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    slot_name            replication slot name
#  ┃ LABEL    datname              associated database name, only logical slot have this
#  ┃ GAUGE    active               whether the slot is currently being used
#  ┃ GAUGE    xmin                 oldest txid that this slot needs the database to retain
#  ┃ GAUGE    catalog_xmin         oldest txid that this slot needs the database to retain for catalog
#  ┃ COUNTER  restart_lsn          lsn that needs retain, wal after that will be kept
#  ┃ COUNTER  confirm_lsn          lsn that confirmed by logical standby, null for physical slot
#  ┃ GAUGE    retained_bytes       bytes retained for this slot
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_slot_active{slot_name,datname}
#  ┃ pg_slot_xmin{slot_name,datname}
#  ┃ pg_slot_catalog_xmin{slot_name,datname}
#  ┃ pg_slot_restart_lsn{slot_name,datname}
#  ┃ pg_slot_confirm_lsn{slot_name,datname}
#  ┃ pg_slot_retained_bytes{slot_name,datname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT slot_name,
#  ┃   database                    AS datname,
#  ┃   active,
#  ┃   xmin::TEXT::BIGINT          AS xmin,
#  ┃   catalog_xmin::TEXT::BIGINT  AS catalog_xmin,
#  ┃   restart_lsn - '0/0'         AS restart_lsn,
#  ┃   confirmed_flush_lsn - '0/0' AS confirm_lsn,
#  ┃   CASE WHEN pg_is_in_recovery()
#  ┃   THEN pg_last_xlog_replay_location()
#  ┃   ELSE pg_current_xlog_location() END - restart_lsn
#  ┃   AS retained_bytes
#  ┃ FROM pg_replication_slots;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_slot_96:
  name: pg_slot
  desc: PostgreSQL replication slot metrics for 9.6

  query: |
    SELECT slot_name,
      database                    AS datname,
      active,
      xmin::TEXT::BIGINT          AS xmin,
      catalog_xmin::TEXT::BIGINT  AS catalog_xmin,
      restart_lsn - '0/0'         AS restart_lsn,
      confirmed_flush_lsn - '0/0' AS confirm_lsn,
      CASE WHEN pg_is_in_recovery()
      THEN pg_last_xlog_replay_location()
      ELSE pg_current_xlog_location() END - restart_lsn
      AS retained_bytes
    FROM pg_replication_slots;

  ttl: 10
  tags: [cluster]
  min_version: 090600
  max_version: 100000

  metrics:
    - slot_name:
        usage: LABEL
        description: replication slot name
    - datname:
        usage: LABEL
        description: associated database name, only logical slot have this
    - active:
        usage: GAUGE
        description: whether the slot is currently being used
    - xmin:
        usage: GAUGE
        description: oldest txid that this slot needs the database to retain
    - catalog_xmin:
        usage: GAUGE
        description: oldest txid that this slot needs the database to retain for catalog
    - restart_lsn:
        usage: COUNTER
        description: lsn that needs retain, wal after that will be kept
    - confirm_lsn:
        usage: COUNTER
        description: lsn that confirmed by logical standby, null for physical slot
    - retained_bytes:
        usage: GAUGE
        description: bytes retained for this slot



#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_slot.pg_slot_94
#  ┃ PostgreSQL replication slot metrics 9.4/9.5
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 109
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ 90600
#  ┃ Source   ┆ 109-pg_slot.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    slot_name            replication slot name
#  ┃ LABEL    datname              associated database name, only logical slot have this
#  ┃ GAUGE    active               whether the slot is currently being used
#  ┃ GAUGE    xmin                 oldest txid that this slot needs the database to retain
#  ┃ GAUGE    catalog_xmin         oldest txid that this slot needs the database to retain for catalog
#  ┃ COUNTER  restart_lsn          lsn that needs retain, wal after that will be kept
#  ┃ GAUGE    retained_bytes       bytes retained for this slot
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_slot_active{slot_name,datname}
#  ┃ pg_slot_xmin{slot_name,datname}
#  ┃ pg_slot_catalog_xmin{slot_name,datname}
#  ┃ pg_slot_restart_lsn{slot_name,datname}
#  ┃ pg_slot_retained_bytes{slot_name,datname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT slot_name,
#  ┃   database                    AS datname,
#  ┃   active,
#  ┃   xmin::TEXT::BIGINT          AS xmin,
#  ┃   catalog_xmin::TEXT::BIGINT  AS catalog_xmin,
#  ┃   restart_lsn - '0/0'         AS restart_lsn,
#  ┃   CASE WHEN pg_is_in_recovery()
#  ┃   THEN pg_last_wal_replay_lsn()
#  ┃   ELSE pg_current_xlog_location() END - restart_lsn
#  ┃   AS retained_bytes
#  ┃ FROM pg_replication_slots;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_slot_94:
  name: pg_slot
  desc: PostgreSQL replication slot metrics 9.4/9.5

  query: |
    SELECT slot_name,
      database                    AS datname,
      active,
      xmin::TEXT::BIGINT          AS xmin,
      catalog_xmin::TEXT::BIGINT  AS catalog_xmin,
      restart_lsn - '0/0'         AS restart_lsn,
      CASE WHEN pg_is_in_recovery()
      THEN pg_last_wal_replay_lsn()
      ELSE pg_current_xlog_location() END - restart_lsn
      AS retained_bytes
    FROM pg_replication_slots;

  ttl: 10
  tags: [cluster]
  min_version: 090400
  max_version: 090600

  metrics:
    - slot_name:
        usage: LABEL
        description: replication slot name
    - datname:
        usage: LABEL
        description: associated database name, only logical slot have this
    - active:
        usage: GAUGE
        description: whether the slot is currently being used
    - xmin:
        usage: GAUGE
        description: oldest txid that this slot needs the database to retain
    - catalog_xmin:
        usage: GAUGE
        description: oldest txid that this slot needs the database to retain for catalog
    - restart_lsn:
        usage: COUNTER
        description: lsn that needs retain, wal after that will be kept
    - retained_bytes:
        usage: GAUGE
        description: bytes retained for this slot

#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_activity
#  ┃ PostgreSQL backend activity group by state
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 110
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 110-pg_activity.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name
#  ┃ LABEL    state                client backend connection state
#  ┃ GAUGE    count                connection count of given (datname,state)
#  ┃ GAUGE    max_duration         max duration since state change among (datname, state)
#  ┃ GAUGE    max_tx_duration      max transaction duration since state change among (datname, state)
#  ┃ GAUGE    max_conn_duration    max backend session duration since state change among (datname, state)
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_activity_count{datname,state}
#  ┃ pg_activity_max_duration{datname,state}
#  ┃ pg_activity_max_tx_duration{datname,state}
#  ┃ pg_activity_max_conn_duration{datname,state}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT datname,
#  ┃        state,
#  ┃        coalesce(count, 0)             AS count,
#  ┃        coalesce(max_duration, 0)      AS max_duration,
#  ┃        coalesce(max_tx_duration, 0)   AS max_tx_duration,
#  ┃        coalesce(max_conn_duration, 0) AS max_conn_duration
#  ┃ FROM (SELECT d.oid AS database, d.datname, a.state
#  ┃       FROM pg_database d,
#  ┃            unnest(ARRAY ['active','idle','idle in transaction','idle in transaction (aborted)','fastpath function call','disabled']) a(state)
#  ┃       WHERE d.datname NOT IN ('postgres','template0','template1')) base
#  ┃          LEFT JOIN (
#  ┃     SELECT datname, state,
#  ┃            count(*) AS count,
#  ┃            max(extract(epoch from now() - state_change)) AS max_duration,
#  ┃            max(extract(epoch from now() - xact_start))   AS max_tx_duration,
#  ┃            max(extract(epoch from now() - backend_start)) AS max_conn_duration
#  ┃     FROM pg_stat_activity WHERE backend_type = 'client backend' AND pid <> pg_backend_pid()
#  ┃     GROUP BY datname, state
#  ┃ ) a USING (datname, state);
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_activity:
  desc: PostgreSQL backend activity group by state

  query: |
    SELECT datname,
           state,
           coalesce(count, 0)             AS count,
           coalesce(max_duration, 0)      AS max_duration,
           coalesce(max_tx_duration, 0)   AS max_tx_duration,
           coalesce(max_conn_duration, 0) AS max_conn_duration
    FROM (SELECT d.oid AS database, d.datname, a.state
          FROM pg_database d,
               unnest(ARRAY ['active','idle','idle in transaction','idle in transaction (aborted)','fastpath function call','disabled']) a(state)
          WHERE d.datname NOT IN ('postgres','template0','template1')) base
             LEFT JOIN (
        SELECT datname, state,
               count(*) AS count,
               max(extract(epoch from now() - state_change)) AS max_duration,
               max(extract(epoch from now() - xact_start))   AS max_tx_duration,
               max(extract(epoch from now() - backend_start)) AS max_conn_duration
        FROM pg_stat_activity WHERE backend_type = 'client backend' AND pid <> pg_backend_pid()
        GROUP BY datname, state
    ) a USING (datname, state);

  ttl: 10
  tags: [cluster]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name
    - state:
        usage: LABEL
        description: client backend connection state
    - count:
        usage: GAUGE
        description: connection count of given (datname,state)
    - max_duration:
        usage: GAUGE
        description: max duration since state change among (datname, state)
    - max_tx_duration:
        usage: GAUGE
        description: max transaction duration since state change among (datname, state)
    - max_conn_duration:
        usage: GAUGE
        description: max backend session duration since state change among (datname, state)



#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_wait
#  ┃ PostgreSQL backend client count group by wait event type since 9.6
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 111
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90600 ~ higher
#  ┃ Source   ┆ 111-pg_wait.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name
#  ┃ LABEL    event                wait event type, LWLock, Lock, BufferPin, Activity, Extension, Client, IPC, Timeout, IO
#  ┃ GAUGE    count                wait event type count
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_wait_count{datname,event}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT datname, wait_event_type AS event, count(*) AS count
#  ┃ FROM pg_stat_activity
#  ┃ WHERE datname NOT IN ('postgres', 'template0', 'template1')
#  ┃   AND backend_type = 'client backend'
#  ┃   AND pid <> pg_backend_pid()
#  ┃ GROUP BY datname, wait_event_type;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_wait:
  name: pg_wait
  desc: PostgreSQL backend client count group by wait event type since 9.6

  query: |
    SELECT datname, wait_event_type AS event, count(*) AS count
    FROM pg_stat_activity
    WHERE datname NOT IN ('postgres', 'template0', 'template1')
      AND backend_type = 'client backend'
      AND pid <> pg_backend_pid()
    GROUP BY datname, wait_event_type;

  ttl: 10
  tags: [cluster]
  min_version: 090600
  skip_errors: true
  metrics:
    - datname:
        usage: LABEL
        description: database name
    - event:
        usage: LABEL
        description: wait event type, LWLock, Lock, BufferPin, Activity, Extension, Client, IPC, Timeout, IO
    - count:
        usage: GAUGE
        description: wait event type count


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_xact
#  ┃
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 112
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 112-pg_xact.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ GAUGE    xmin                 earliest txid that is still active
#  ┃ GAUGE    xmax                 first as-yet-unassigned txid. txid >= this are invisible.
#  ┃ GAUGE    xnum                 current active transaction count
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_xact_xmin{}
#  ┃ pg_xact_xmax{}
#  ┃ pg_xact_xnum{}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ WITH snap(v) AS (SELECT txid_current_snapshot()),
#  ┃      xset(v) AS  (SELECT txid_snapshot_xip(v) FROM snap),
#  ┃      xnum(v) AS (SELECT count(*) from xset),
#  ┃      xmin(v) AS (SELECT txid_snapshot_xmin(v) FROM snap),
#  ┃      xmax(v) AS (SELECT txid_snapshot_xmin(v) FROM snap)
#  ┃ SELECT xmin.v AS xmin, xmax.v AS xmax, xnum.v AS xnum FROM xmin, xmax, xnum;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_xact:
  query: |
    WITH snap(v) AS (SELECT txid_current_snapshot()),
         xset(v) AS  (SELECT txid_snapshot_xip(v) FROM snap),
         xnum(v) AS (SELECT count(*) from xset),
         xmin(v) AS (SELECT txid_snapshot_xmin(v) FROM snap),
         xmax(v) AS (SELECT txid_snapshot_xmin(v) FROM snap)
    SELECT xmin.v AS xmin, xmax.v AS xmax, xnum.v AS xnum FROM xmin, xmax, xnum;

  ttl: 10
  tags: [cluster]
  min_version: 090400
  skip_errors: true

  metrics:
    - xmin:
        usage: GAUGE
        description: earliest txid that is still active
    - xmax:
        usage: GAUGE
        description: first as-yet-unassigned txid. txid >= this are invisible.
    - xnum:
        usage: GAUGE
        description: current active transaction count


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_lock
#  ┃ PostgreSQL lock distribution by mode
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 113
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 114-pg_lock.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              Name of the database
#  ┃ LABEL    mode                 Type of lock
#  ┃ COUNTER  count                Number of locks of corresponding mode
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_lock_count{datname,mode}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT datname, mode, coalesce(count, 0) AS count
#  ┃ FROM (SELECT d.oid AS database, d.datname, l.mode FROM pg_database d,
#  ┃            unnest(ARRAY ['AccessShareLock','RowShareLock','RowExclusiveLock','ShareUpdateExclusiveLock',
#  ┃                'ShareLock','ShareRowExclusiveLock','ExclusiveLock','AccessExclusiveLock']) l(mode)
#  ┃       WHERE d.datname NOT IN ('postgres','template0','template1')) base
#  ┃          LEFT JOIN (SELECT database, mode, count(*) AS count FROM pg_locks
#  ┃          WHERE database IS NOT NULL GROUP BY database, mode) cnt USING (database, mode);
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_lock:
  desc: PostgreSQL lock distribution by mode
  query: |
    SELECT datname, mode, coalesce(count, 0) AS count
    FROM (SELECT d.oid AS database, d.datname, l.mode FROM pg_database d,
               unnest(ARRAY ['AccessShareLock','RowShareLock','RowExclusiveLock','ShareUpdateExclusiveLock',
                   'ShareLock','ShareRowExclusiveLock','ExclusiveLock','AccessExclusiveLock']) l(mode)
          WHERE d.datname NOT IN ('postgres','template0','template1')) base
             LEFT JOIN (SELECT database, mode, count(*) AS count FROM pg_locks
             WHERE database IS NOT NULL GROUP BY database, mode) cnt USING (database, mode);

  ttl: 10
  tags: [cluster]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: Name of the database
    - mode:
        usage: LABEL
        description: Type of lock
    - count:
        usage: COUNTER
        description: Number of locks of corresponding mode


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_vacuuming
#  ┃ PostgreSQL vacuum progress since 9.6
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 114
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 120000 ~ higher
#  ┃ Source   ┆ 115-pg_vacuuming.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name
#  ┃ LABEL    pid                  process id of indexing table
#  ┃ DISCARD  relid                relation id of indexed table
#  ┃ LABEL    relname              relation name of indexed table
#  ┃ LABEL    phase                index building phase
#  ┃ GAUGE    progress             the actual progress
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_vacuuming_progress{datname,pid,relname,phase}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT pid,
#  ┃        datname,
#  ┃        relid,
#  ┃        relname,
#  ┃        phase,
#  ┃        CASE WHEN heap_blks_total > 0 THEN 1.0 * heap_blks_vacuumed / heap_blks_total ELSE 0 END AS progress
#  ┃ FROM pg_stat_progress_vacuum pspv,
#  ┃      LATERAL (SELECT relname FROM pg_class c WHERE c.oid = pspv.relid) n;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_vacuuming:
  desc: PostgreSQL vacuum progress since 9.6
  query: |
    SELECT pid,
           datname,
           relid,
           relname,
           phase,
           CASE WHEN heap_blks_total > 0 THEN 1.0 * heap_blks_vacuumed / heap_blks_total ELSE 0 END AS progress
    FROM pg_stat_progress_vacuum pspv,
         LATERAL (SELECT relname FROM pg_class c WHERE c.oid = pspv.relid) n;

  ttl: 10
  tags: [cluster]
  min_version: 120000

  metrics:
    - datname:
        usage: LABEL
        description: database name
    - pid:
        usage: LABEL
        description: process id of indexing table
    - relid:
        usage: DISCARD
        description: relation id of indexed table
    - relname:
        usage: LABEL
        description: relation name of indexed table
    - phase:
        usage: LABEL
        description: index building phase
    - progress:
        usage: GAUGE
        description: the actual progress

#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_indexing
#  ┃ PostgreSQL index creating progress since 12
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 115
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 120000 ~ higher
#  ┃ Source   ┆ 116-pg_indexing.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name
#  ┃ LABEL    pid                  process id of indexing table
#  ┃ DISCARD  relid                relation id of indexed table
#  ┃ LABEL    relname              relation name of indexed table
#  ┃ LABEL    phase                index building phase
#  ┃ GAUGE    progress             the actual progress
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_indexing_progress{datname,pid,relname,phase}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT datname, pid, relid, relname, phase,
#  ┃        coalesce((CASE WHEN blocks_total > 0 THEN 1.0 * blocks_done / blocks_total ELSE NULL END),
#  ┃                 (CASE WHEN tuples_total > 0 THEN 1.0 * tuples_done / tuples_total ELSE NULL END),
#  ┃                 (CASE WHEN partitions_total > 0 THEN 1.0 * partitions_done / partitions_total ELSE NULL END),
#  ┃                 (CASE WHEN lockers_total > 0 THEN 1.0 * lockers_done / lockers_total ELSE NULL END)) AS progress
#  ┃ FROM pg_stat_progress_create_index pspci,
#  ┃      LATERAL (SELECT relname FROM pg_class c WHERE c.oid = pspci.relid) n;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_indexing:
  desc: PostgreSQL index creating progress since 12

  query: |
    SELECT datname, pid, relid, relname, phase,
           coalesce((CASE WHEN blocks_total > 0 THEN 1.0 * blocks_done / blocks_total ELSE NULL END),
                    (CASE WHEN tuples_total > 0 THEN 1.0 * tuples_done / tuples_total ELSE NULL END),
                    (CASE WHEN partitions_total > 0 THEN 1.0 * partitions_done / partitions_total ELSE NULL END),
                    (CASE WHEN lockers_total > 0 THEN 1.0 * lockers_done / lockers_total ELSE NULL END)) AS progress
    FROM pg_stat_progress_create_index pspci,
         LATERAL (SELECT relname FROM pg_class c WHERE c.oid = pspci.relid) n;

  ttl: 10
  tags: [cluster]
  min_version: 120000

  metrics:
    - datname:
        usage: LABEL
        description: database name
    - pid:
        usage: LABEL
        description: process id of indexing table
    - relid:
        usage: DISCARD
        description: relation id of indexed table
    - relname:
        usage: LABEL
        description: relation name of indexed table
    - phase:
        usage: LABEL
        description: index building phase
    - progress:
        usage: GAUGE
        description: the actual progress


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_clustering
#  ┃ PostgreSQL cluster/vacuum full progress since 12
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 116
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 120000 ~ higher
#  ┃ Source   ┆ 117-pg_clustering.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name
#  ┃ LABEL    pid                  process id of indexing table
#  ┃ DISCARD  relid                relation id of indexed table
#  ┃ LABEL    relname              relation name of indexed table
#  ┃ LABEL    phase                index building phase
#  ┃ GAUGE    progress             the actual progress
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_clustering_progress{datname,pid,relname,phase}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT pid,
#  ┃        datname,
#  ┃        relid,
#  ┃        relname,
#  ┃        phase,
#  ┃        CASE WHEN heap_blks_total > 0 THEN 1.0 * heap_blks_scanned / heap_blks_total ELSE 0 END AS progress
#  ┃ FROM pg_stat_progress_cluster pspc,
#  ┃      LATERAL (SELECT relname FROM pg_class c WHERE c.oid = pspc.relid) n;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_clustering:
  desc: PostgreSQL cluster/vacuum full progress since 12

  query: |
    SELECT pid,
           datname,
           relid,
           relname,
           phase,
           CASE WHEN heap_blks_total > 0 THEN 1.0 * heap_blks_scanned / heap_blks_total ELSE 0 END AS progress
    FROM pg_stat_progress_cluster pspc,
         LATERAL (SELECT relname FROM pg_class c WHERE c.oid = pspc.relid) n;

  ttl: 10
  tags: [cluster]
  min_version: 120000

  metrics:
    - datname:
        usage: LABEL
        description: database name
    - pid:
        usage: LABEL
        description: process id of indexing table
    - relid:
        usage: DISCARD
        description: relation id of indexed table
    - relname:
        usage: LABEL
        description: relation name of indexed table
    - phase:
        usage: LABEL
        description: index building phase
    - progress:
        usage: GAUGE
        description: the actual progress


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_query
#  ┃ PostgreSQL Query metrics, require pg_stat_statements installed in schema monitor
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster extension:pg_stat_statements schema:monitor]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 117
#  ┃ Timeout  ┆ 3s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 118-pg_query.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name
#  ┃ LABEL    query                query identifier, bigint
#  ┃ COUNTER  calls                times been executed
#  ┃ COUNTER  total_time           Total time spent in the statement, in µs
#  ┃ GAUGE    min_time             Minimum time spent in the statement, in µs
#  ┃ GAUGE    max_time             Maximum time spent in the statement, in µs
#  ┃ GAUGE    mean_time            Mean time spent in the statement, in µs
#  ┃ GAUGE    stddev_time          Population standard deviation of time spent in the statement, in µs
#  ┃ COUNTER  rows                 rows retrieved or affected by the statement
#  ┃ COUNTER  shared_blks_hit      shared block cache hits by the statement
#  ┃ COUNTER  shared_blks_read     shared blocks read by the statement
#  ┃ COUNTER  shared_blks_dirtied  shared blocks dirtied by the statement
#  ┃ COUNTER  shared_blks_written  shared blocks written by the statement
#  ┃ COUNTER  local_blks_hit       local block cache hits by the statement
#  ┃ COUNTER  local_blks_read      local blocks read by the statement
#  ┃ COUNTER  local_blks_dirtied   local blocks dirtied by the statement
#  ┃ COUNTER  local_blks_written   local blocks written by the statement
#  ┃ COUNTER  temp_blks_read       temp blocks read by the statement
#  ┃ COUNTER  temp_blks_written    temp blocks written by the statement
#  ┃ COUNTER  blk_read_time        time spent reading blocks, in µs (if track_io_timing is enabled)
#  ┃ COUNTER  blk_write_time       time spent writing blocks, in µs (if track_io_timing is enabled)
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_query_calls{datname,query}
#  ┃ pg_query_total_time{datname,query}
#  ┃ pg_query_min_time{datname,query}
#  ┃ pg_query_max_time{datname,query}
#  ┃ pg_query_mean_time{datname,query}
#  ┃ pg_query_stddev_time{datname,query}
#  ┃ pg_query_rows{datname,query}
#  ┃ pg_query_shared_blks_hit{datname,query}
#  ┃ pg_query_shared_blks_read{datname,query}
#  ┃ pg_query_shared_blks_dirtied{datname,query}
#  ┃ pg_query_shared_blks_written{datname,query}
#  ┃ pg_query_local_blks_hit{datname,query}
#  ┃ pg_query_local_blks_read{datname,query}
#  ┃ pg_query_local_blks_dirtied{datname,query}
#  ┃ pg_query_local_blks_written{datname,query}
#  ┃ pg_query_temp_blks_read{datname,query}
#  ┃ pg_query_temp_blks_written{datname,query}
#  ┃ pg_query_blk_read_time{datname,query}
#  ┃ pg_query_blk_write_time{datname,query}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT datname,
#  ┃        queryid AS query,
#  ┃        sum(calls)               AS calls,
#  ┃        sum(total_time)          AS total_time,
#  ┃        sum(min_time)            AS min_time,
#  ┃        sum(max_time)            AS max_time,
#  ┃        sum(mean_time)           AS mean_time,
#  ┃        sum(stddev_time)         AS stddev_time,
#  ┃        sum(rows)                AS rows,
#  ┃        sum(shared_blks_hit)     AS shared_blks_hit,
#  ┃        sum(shared_blks_read)    AS shared_blks_read,
#  ┃        sum(shared_blks_dirtied) AS shared_blks_dirtied,
#  ┃        sum(shared_blks_written) AS shared_blks_written,
#  ┃        sum(local_blks_hit)      AS local_blks_hit,
#  ┃        sum(local_blks_read)     AS local_blks_read,
#  ┃        sum(local_blks_dirtied)  AS local_blks_dirtied,
#  ┃        sum(local_blks_written)  AS local_blks_written,
#  ┃        sum(temp_blks_read)      AS temp_blks_read,
#  ┃        sum(temp_blks_written)   AS temp_blks_written,
#  ┃        sum(blk_read_time)       AS blk_read_time,
#  ┃        sum(blk_write_time)      AS blk_write_time
#  ┃ FROM monitor.pg_stat_statements s, LATERAL (SELECT datname FROM pg_database db WHERE db.oid = s.dbid) d
#  ┃ GROUP BY datname, queryid
#  ┃ ORDER BY calls DESC, total_time DESC LIMIT 16;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_query:
  desc: PostgreSQL Query metrics, require pg_stat_statements installed in schema monitor
  query: |
    SELECT datname,
           queryid AS query,
           sum(calls)               AS calls,
           sum(total_time)          AS total_time,
           sum(min_time)            AS min_time,
           sum(max_time)            AS max_time,
           sum(mean_time)           AS mean_time,
           sum(stddev_time)         AS stddev_time,
           sum(rows)                AS rows,
           sum(shared_blks_hit)     AS shared_blks_hit,
           sum(shared_blks_read)    AS shared_blks_read,
           sum(shared_blks_dirtied) AS shared_blks_dirtied,
           sum(shared_blks_written) AS shared_blks_written,
           sum(local_blks_hit)      AS local_blks_hit,
           sum(local_blks_read)     AS local_blks_read,
           sum(local_blks_dirtied)  AS local_blks_dirtied,
           sum(local_blks_written)  AS local_blks_written,
           sum(temp_blks_read)      AS temp_blks_read,
           sum(temp_blks_written)   AS temp_blks_written,
           sum(blk_read_time)       AS blk_read_time,
           sum(blk_write_time)      AS blk_write_time
    FROM monitor.pg_stat_statements s, LATERAL (SELECT datname FROM pg_database db WHERE db.oid = s.dbid) d
    GROUP BY datname, queryid
    ORDER BY calls DESC, total_time DESC LIMIT 16;

  ttl: 100
  timeout: 3
  tags: [cluster, extension:pg_stat_statements , schema:monitor]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name
    - query:
        usage: LABEL
        description: query identifier, bigint
    - calls:
        usage: COUNTER
        description: times been executed
    - total_time:
        usage: COUNTER
        description: Total time spent in the statement, in µs
    - min_time:
        usage: GAUGE
        description: Minimum time spent in the statement, in µs
    - max_time:
        usage: GAUGE
        description: Maximum time spent in the statement, in µs
    - mean_time:
        usage: GAUGE
        description: Mean time spent in the statement, in µs
    - stddev_time:
        usage: GAUGE
        description: Population standard deviation of time spent in the statement, in µs
    - rows:
        usage: COUNTER
        description: rows retrieved or affected by the statement
    - shared_blks_hit:
        usage: COUNTER
        description: shared block cache hits by the statement
    - shared_blks_read:
        usage: COUNTER
        description: shared blocks read by the statement
    - shared_blks_dirtied:
        usage: COUNTER
        description: shared blocks dirtied by the statement
    - shared_blks_written:
        usage: COUNTER
        description: shared blocks written by the statement
    - local_blks_hit:
        usage: COUNTER
        description: local block cache hits by the statement
    - local_blks_read:
        usage: COUNTER
        description: local blocks read by the statement
    - local_blks_dirtied:
        usage: COUNTER
        description: local blocks dirtied by the statement
    - local_blks_written:
        usage: COUNTER
        description: local blocks written by the statement
    - temp_blks_read:
        usage: COUNTER
        description: temp blocks read by the statement
    - temp_blks_written:
        usage: COUNTER
        description: temp blocks written by the statement
    - blk_read_time:
        usage: COUNTER
        description: time spent reading blocks, in µs (if track_io_timing is enabled)
    - blk_write_time:
        usage: COUNTER
        description: time spent writing blocks, in µs (if track_io_timing is enabled)


#-------------------------------------------------------------#
# pg_size
# total sizes
# pg_ls_waldir and pg_ls_log_dir is available since PostgreSQL 10
#-------------------------------------------------------------#


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_size
#  ┃ PostgreSQL Database, WAL, Log size since 10
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 118
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 100000 ~ higher
#  ┃ Source   ┆ 119-pg_size.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ GAUGE    log                  database log file size in bytes
#  ┃ GAUGE    wal                  WAL file size in bytes
#  ┃ GAUGE    database             all database size in bytes
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_size_log{}
#  ┃ pg_size_wal{}
#  ┃ pg_size_database{}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT (SELECT (coalesce(sum(size), 0)) FROM pg_ls_logdir())          AS log,
#  ┃        (SELECT coalesce(sum(size), 0) FROM pg_catalog.pg_ls_waldir()) AS wal,
#  ┃        (SELECT sum(pg_database_size(oid)) FROM pg_database)           AS database;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_size:
  desc: PostgreSQL Database, WAL, Log size since 10

  query: |
    SELECT (SELECT (coalesce(sum(size), 0)) FROM pg_ls_logdir())          AS log,
           (SELECT coalesce(sum(size), 0) FROM pg_catalog.pg_ls_waldir()) AS wal,
           (SELECT sum(pg_database_size(oid)) FROM pg_database)           AS database;

  ttl: 100
  tags: [cluster]
  min_version: 100000

  metrics:
    - log:
        usage: GAUGE
        description: database log file size in bytes
    - wal:
        usage: GAUGE
        description: WAL file size in bytes
    - database:
        usage: GAUGE
        description: all database size in bytes


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_database
#  ┃
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 119
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 100000 ~ 130000
#  ┃ Source   ┆ 120-pg_database.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name
#  ┃ GAUGE    size                 database size in bytes
#  ┃ GAUGE    age                  database age calculated by age(datfrozenxid)
#  ┃ GAUGE    is_template          1 for template db , 0 for normal db
#  ┃ GAUGE    allow_conn           1 allow connection, 0 does not allow
#  ┃ GAUGE    conn_limit           connection limit, -1 for no limit
#  ┃ GAUGE    frozen_xid           tuple with xmin below this will always be visable (until wrap around)
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_database_size{datname}
#  ┃ pg_database_age{datname}
#  ┃ pg_database_is_template{datname}
#  ┃ pg_database_allow_conn{datname}
#  ┃ pg_database_conn_limit{datname}
#  ┃ pg_database_frozen_xid{datname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT datname,
#  ┃        pg_database_size(oid)      AS size,
#  ┃        age(datfrozenxid)          AS age,
#  ┃        datistemplate              AS is_template,
#  ┃        datallowconn               AS allow_conn,
#  ┃        datconnlimit               AS conn_limit,
#  ┃        datfrozenxid::TEXT::BIGINT as frozen_xid
#  ┃ FROM pg_database;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_database:
  query: |
    SELECT datname,
           pg_database_size(oid)      AS size,
           age(datfrozenxid)          AS age,
           datistemplate              AS is_template,
           datallowconn               AS allow_conn,
           datconnlimit               AS conn_limit,
           datfrozenxid::TEXT::BIGINT as frozen_xid
    FROM pg_database;

  ttl: 100
  timeout: 1
  tags: [cluster]
  min_version: 100000
  max_version: 130000

  metrics:
    - datname:
        usage: LABEL
        description: database name
    - size:
        usage: GAUGE
        description: database size in bytes
    - age:
        usage: GAUGE
        description: database age calculated by age(datfrozenxid)
    - is_template:
        usage: GAUGE
        description: 1 for template db , 0 for normal db
    - allow_conn:
        usage: GAUGE
        description: 1 allow connection, 0 does not allow
    - conn_limit:
        usage: GAUGE
        description: connection limit, -1 for no limit
    - frozen_xid:
        usage: GAUGE
        description: tuple with xmin below this will always be visable (until wrap around)


#-------------------------------------------------------------#
# pg_db
# note this query will return different number of columns
# e.g: checksum_failures , checksum_last_failure is provided in 12
#-------------------------------------------------------------#



#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_db.pg_db_12
#  ┃ PostgreSQL database statistics 12+
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 120
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 120000 ~ higher
#  ┃ Source   ┆ 121-pg_db.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ DISCARD  datid                Name of the database
#  ┃ LABEL    datname              Name of the database
#  ┃ GAUGE    numbackends          backends currently connected to this database
#  ┃ COUNTER  xact_commit          transactions in this database that have been committed
#  ┃ COUNTER  xact_rollback        transactions in this database that have been rolled back
#  ┃ COUNTER  blks_read            blocks read from disk in this database
#  ┃ COUNTER  blks_hit             blocks found in pg buffer
#  ┃ COUNTER  tup_returned         rows returned by queries in this database
#  ┃ COUNTER  tup_fetched          rows fetched by queries in this database
#  ┃ COUNTER  tup_inserted         rows inserted by queries in this database
#  ┃ COUNTER  tup_updated          rows updated by queries in this database
#  ┃ COUNTER  tup_deleted          rows deleted by queries in this database
#  ┃ GAUGE    conflicts            Number of queries canceled due to conflicts with recovery in this database. (slave only)
#  ┃ GAUGE    temp_files           Number of temporary files created by queries in this database
#  ┃ GAUGE    temp_bytes           Temporary file byte count
#  ┃ GAUGE    deadlocks            Number of deadlocks detected in this database
#  ┃ GAUGE    checksum_failures    Number of data page checksum failures detected in this database, 12+ only
#  ┃ GAUGE    checksum_last_failure Time at which the last data page checksum failure was detected, 12+ only
#  ┃ COUNTER  blk_read_time        Time spent reading data file blocks by backends in this database, in milliseconds
#  ┃ COUNTER  blk_write_time       Time spent writing data file blocks by backends in this database, in milliseconds
#  ┃ COUNTER  stats_reset          Time at which these statistics were last reset
#  ┃ COUNTER  confl_tablespace     Number of queries in this database that have been canceled due to dropped tablespaces
#  ┃ COUNTER  confl_lock           Number of queries in this database that have been canceled due to lock timeouts
#  ┃ COUNTER  confl_snapshot       Number of queries in this database that have been canceled due to old snapshots
#  ┃ COUNTER  confl_bufferpin      Number of queries in this database that have been canceled due to pinned buffers
#  ┃ COUNTER  confl_deadlock       Number of queries in this database that have been canceled due to deadlocks
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_db_numbackends{datname}
#  ┃ pg_db_xact_commit{datname}
#  ┃ pg_db_xact_rollback{datname}
#  ┃ pg_db_blks_read{datname}
#  ┃ pg_db_blks_hit{datname}
#  ┃ pg_db_tup_returned{datname}
#  ┃ pg_db_tup_fetched{datname}
#  ┃ pg_db_tup_inserted{datname}
#  ┃ pg_db_tup_updated{datname}
#  ┃ pg_db_tup_deleted{datname}
#  ┃ pg_db_conflicts{datname}
#  ┃ pg_db_temp_files{datname}
#  ┃ pg_db_temp_bytes{datname}
#  ┃ pg_db_deadlocks{datname}
#  ┃ pg_db_checksum_failures{datname}
#  ┃ pg_db_checksum_last_failure{datname}
#  ┃ pg_db_blk_read_time{datname}
#  ┃ pg_db_blk_write_time{datname}
#  ┃ pg_db_stats_reset{datname}
#  ┃ pg_db_confl_tablespace{datname}
#  ┃ pg_db_confl_lock{datname}
#  ┃ pg_db_confl_snapshot{datname}
#  ┃ pg_db_confl_bufferpin{datname}
#  ┃ pg_db_confl_deadlock{datname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT d.*, c.*
#  ┃ FROM pg_stat_database d,
#  ┃      LATERAL (SELECT confl_tablespace, confl_lock, confl_snapshot, confl_bufferpin, confl_deadlock
#  ┃               FROM pg_stat_database_conflicts pdc WHERE pdc.datname = d.datname) c
#  ┃ WHERE d.datname NOT IN ('postgres','template0','template1');
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_db_12:
  name: pg_db
  desc: PostgreSQL database statistics 12+

  query: |
    SELECT d.*, c.*
    FROM pg_stat_database d,
         LATERAL (SELECT confl_tablespace, confl_lock, confl_snapshot, confl_bufferpin, confl_deadlock
                  FROM pg_stat_database_conflicts pdc WHERE pdc.datname = d.datname) c
    WHERE d.datname NOT IN ('postgres','template0','template1');

  ttl: 10
  timeout: 1
  tags: [cluster]
  min_version: 120000

  metrics:
    - datid:
        usage: DISCARD
        description: Name of the database
    - datname:
        usage: LABEL
        description: Name of the database
    - numbackends:
        usage: GAUGE
        description: backends currently connected to this database
    - xact_commit:
        usage: COUNTER
        description: transactions in this database that have been committed
    - xact_rollback:
        usage: COUNTER
        description: transactions in this database that have been rolled back
    - blks_read:
        usage: COUNTER
        description: blocks read from disk in this database
    - blks_hit:
        usage: COUNTER
        description: blocks found in pg buffer
    - tup_returned:
        usage: COUNTER
        description: rows returned by queries in this database
    - tup_fetched:
        usage: COUNTER
        description: rows fetched by queries in this database
    - tup_inserted:
        usage: COUNTER
        description: rows inserted by queries in this database
    - tup_updated:
        usage: COUNTER
        description: rows updated by queries in this database
    - tup_deleted:
        usage: COUNTER
        description: rows deleted by queries in this database
    - conflicts:
        usage: GAUGE
        description: Number of queries canceled due to conflicts with recovery in this database. (slave only)
    - temp_files:
        usage: GAUGE
        description: Number of temporary files created by queries in this database
    - temp_bytes:
        usage: GAUGE
        description: Temporary file byte count
    - deadlocks:
        usage: GAUGE
        description: Number of deadlocks detected in this database
    - checksum_failures:
        usage: GAUGE
        description: Number of data page checksum failures detected in this database, 12+ only
    - checksum_last_failure:
        usage: GAUGE
        description: Time at which the last data page checksum failure was detected, 12+ only
    - blk_read_time:
        usage: COUNTER
        description: Time spent reading data file blocks by backends in this database, in milliseconds
    - blk_write_time:
        usage: COUNTER
        description: Time spent writing data file blocks by backends in this database, in milliseconds
    - stats_reset:
        usage: COUNTER
        description: Time at which these statistics were last reset
    - confl_tablespace:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to dropped tablespaces
    - confl_lock:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to lock timeouts
    - confl_snapshot:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to old snapshots
    - confl_bufferpin:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to pinned buffers
    - confl_deadlock:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to deadlocks




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_db.pg_db_93_11
#  ┃ PostgreSQL database statistics 93 ~ 11
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [cluster]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 120
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90300 ~ 120000
#  ┃ Source   ┆ 121-pg_db.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ DISCARD  datid                Name of the database
#  ┃ LABEL    datname              Name of the database
#  ┃ GAUGE    numbackends          backends currently connected to this database
#  ┃ COUNTER  xact_commit          transactions in this database that have been committed
#  ┃ COUNTER  xact_rollback        transactions in this database that have been rolled back
#  ┃ COUNTER  blks_read            blocks read from disk in this database
#  ┃ COUNTER  blks_hit             blocks found in pg buffer
#  ┃ COUNTER  tup_returned         rows returned by queries in this database
#  ┃ COUNTER  tup_fetched          rows fetched by queries in this database
#  ┃ COUNTER  tup_inserted         rows inserted by queries in this database
#  ┃ COUNTER  tup_updated          rows updated by queries in this database
#  ┃ COUNTER  tup_deleted          rows deleted by queries in this database
#  ┃ GAUGE    conflicts            Number of queries canceled due to conflicts with recovery in this database. (slave only)
#  ┃ GAUGE    temp_files           Number of temporary files created by queries in this database
#  ┃ GAUGE    temp_bytes           Temporary file byte count
#  ┃ GAUGE    deadlocks            Number of deadlocks detected in this database
#  ┃ COUNTER  blk_read_time        Time spent reading data file blocks by backends in this database, in milliseconds
#  ┃ COUNTER  blk_write_time       Time spent writing data file blocks by backends in this database, in milliseconds
#  ┃ COUNTER  stats_reset          Time at which these statistics were last reset
#  ┃ COUNTER  confl_tablespace     Number of queries in this database that have been canceled due to dropped tablespaces
#  ┃ COUNTER  confl_lock           Number of queries in this database that have been canceled due to lock timeouts
#  ┃ COUNTER  confl_snapshot       Number of queries in this database that have been canceled due to old snapshots
#  ┃ COUNTER  confl_bufferpin      Number of queries in this database that have been canceled due to pinned buffers
#  ┃ COUNTER  confl_deadlock       Number of queries in this database that have been canceled due to deadlocks
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_db_numbackends{datname}
#  ┃ pg_db_xact_commit{datname}
#  ┃ pg_db_xact_rollback{datname}
#  ┃ pg_db_blks_read{datname}
#  ┃ pg_db_blks_hit{datname}
#  ┃ pg_db_tup_returned{datname}
#  ┃ pg_db_tup_fetched{datname}
#  ┃ pg_db_tup_inserted{datname}
#  ┃ pg_db_tup_updated{datname}
#  ┃ pg_db_tup_deleted{datname}
#  ┃ pg_db_conflicts{datname}
#  ┃ pg_db_temp_files{datname}
#  ┃ pg_db_temp_bytes{datname}
#  ┃ pg_db_deadlocks{datname}
#  ┃ pg_db_blk_read_time{datname}
#  ┃ pg_db_blk_write_time{datname}
#  ┃ pg_db_stats_reset{datname}
#  ┃ pg_db_confl_tablespace{datname}
#  ┃ pg_db_confl_lock{datname}
#  ┃ pg_db_confl_snapshot{datname}
#  ┃ pg_db_confl_bufferpin{datname}
#  ┃ pg_db_confl_deadlock{datname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT d.*, c.*
#  ┃ FROM pg_stat_database d,
#  ┃      LATERAL (SELECT confl_tablespace, confl_lock, confl_snapshot, confl_bufferpin, confl_deadlock
#  ┃               FROM pg_stat_database_conflicts pdc WHERE pdc.datname = d.datname) c
#  ┃ WHERE d.datname NOT IN ('postgres','template0','template1');
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_db_93_11:
  name: pg_db
  desc: PostgreSQL database statistics 93 ~ 11

  query: |
    SELECT d.*, c.*
    FROM pg_stat_database d,
         LATERAL (SELECT confl_tablespace, confl_lock, confl_snapshot, confl_bufferpin, confl_deadlock
                  FROM pg_stat_database_conflicts pdc WHERE pdc.datname = d.datname) c
    WHERE d.datname NOT IN ('postgres','template0','template1');

  ttl: 10
  timeout: 1
  tags: [cluster]
  min_version: 90300
  max_version: 120000

  metrics:
    - datid:
        usage: DISCARD
        description: Name of the database
    - datname:
        usage: LABEL
        description: Name of the database
    - numbackends:
        usage: GAUGE
        description: backends currently connected to this database
    - xact_commit:
        usage: COUNTER
        description: transactions in this database that have been committed
    - xact_rollback:
        usage: COUNTER
        description: transactions in this database that have been rolled back
    - blks_read:
        usage: COUNTER
        description: blocks read from disk in this database
    - blks_hit:
        usage: COUNTER
        description: blocks found in pg buffer
    - tup_returned:
        usage: COUNTER
        description: rows returned by queries in this database
    - tup_fetched:
        usage: COUNTER
        description: rows fetched by queries in this database
    - tup_inserted:
        usage: COUNTER
        description: rows inserted by queries in this database
    - tup_updated:
        usage: COUNTER
        description: rows updated by queries in this database
    - tup_deleted:
        usage: COUNTER
        description: rows deleted by queries in this database
    - conflicts:
        usage: GAUGE
        description: Number of queries canceled due to conflicts with recovery in this database. (slave only)
    - temp_files:
        usage: GAUGE
        description: Number of temporary files created by queries in this database
    - temp_bytes:
        usage: GAUGE
        description: Temporary file byte count
    - deadlocks:
        usage: GAUGE
        description: Number of deadlocks detected in this database
    - blk_read_time:
        usage: COUNTER
        description: Time spent reading data file blocks by backends in this database, in milliseconds
    - blk_write_time:
        usage: COUNTER
        description: Time spent writing data file blocks by backends in this database, in milliseconds
    - stats_reset:
        usage: COUNTER
        description: Time at which these statistics were last reset
    - confl_tablespace:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to dropped tablespaces
    - confl_lock:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to lock timeouts
    - confl_snapshot:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to old snapshots
    - confl_bufferpin:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to pinned buffers
    - confl_deadlock:
        usage: COUNTER
        description: Number of queries in this database that have been canceled due to deadlocks

###############################################################
# Database Level Metrics
#   These metrics are unique for different database. So it will
#   be executed for each database even they lies in same cluster
#   note you'd better provide a datname label in your query in
#   order to get rid of name collision
###############################################################


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_class
#  ┃ Postgres relation statistic, db level , normal version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [not:shard]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 121
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 130-pg_class.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this relation
#  ┃ LABEL    nspname              schema name of this relation
#  ┃ LABEL    relname              relation name of this relation
#  ┃ LABEL    relkind              relation type r-table i-index s-sequence m-mview t-toast
#  ┃ GAUGE    relpages             exact page count of this relation
#  ┃ GAUGE    reltuples            estimate relation tuples
#  ┃ GAUGE    relage               age of non-index relation
#  ┃ GAUGE    relsize              size of this relation
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_class_relpages{datname,nspname,relname,relkind}
#  ┃ pg_class_reltuples{datname,nspname,relname,relkind}
#  ┃ pg_class_relage{datname,nspname,relname,relkind}
#  ┃ pg_class_relsize{datname,nspname,relname,relkind}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG                                              AS datname,
#  ┃        relnamespace::RegNamespace                                   AS nspname,
#  ┃        relname,
#  ┃        relkind,
#  ┃        relpages,
#  ┃        reltuples,
#  ┃        CASE WHEN relkind = 'i' THEN NULL ELSE age(relfrozenxid) END AS relage,
#  ┃        pg_relation_size(oid)                                        AS relsize
#  ┃ FROM pg_class
#  ┃ WHERE relnamespace NOT IN
#  ┃       ('pg_catalog'::regnamespace::oid, 'information_schema'::regnamespace::oid, 'pg_toast'::regnamespace::oid)
#  ┃   AND relkind IN ('r', 'i', 'm', 't')
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_class:
  name: pg_class
  desc: Postgres relation statistic, db level , normal version

  query: |
    SELECT CURRENT_CATALOG                                              AS datname,
           relnamespace::RegNamespace                                   AS nspname,
           relname,
           relkind,
           relpages,
           reltuples,
           CASE WHEN relkind = 'i' THEN NULL ELSE age(relfrozenxid) END AS relage,
           pg_relation_size(oid)                                        AS relsize
    FROM pg_class
    WHERE relnamespace NOT IN
          ('pg_catalog'::regnamespace::oid, 'information_schema'::regnamespace::oid, 'pg_toast'::regnamespace::oid)
      AND relkind IN ('r', 'i', 'm', 't')

  ttl: 100
  timeout: 1
  tags: [not:shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this relation
    - nspname:
        usage: LABEL
        description: schema name of this relation
    - relname:
        usage: LABEL
        description: relation name of this relation
    - relkind:
        usage: LABEL
        description: relation type r-table i-index s-sequence m-mview t-toast
    - relpages:
        usage: GAUGE
        description: exact page count of this relation
    - reltuples:
        usage: GAUGE
        description: estimate relation tuples
    - relage:
        usage: GAUGE
        description: age of non-index relation
    - relsize:
        usage: GAUGE
        description: size of this relation


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_class.pg_class_shard
#  ┃ Postgres relation statistic, db level , shard version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [shard]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 121
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 121-pg_class.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this relation
#  ┃ LABEL    nspname              schema name of this relation
#  ┃ LABEL    relname              relation name of this relation
#  ┃ LABEL    relkind              relation type r-table i-index s-sequence m-mview t-toast
#  ┃ GAUGE    relpages             exact page count of this relation
#  ┃ GAUGE    reltuples            estimate relation tuples
#  ┃ GAUGE    relage               age of non-index relation
#  ┃ GAUGE    relsize              size of this relation
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_class_relpages{datname,nspname,relname,relkind}
#  ┃ pg_class_reltuples{datname,nspname,relname,relkind}
#  ┃ pg_class_relage{datname,nspname,relname,relkind}
#  ┃ pg_class_relsize{datname,nspname,relname,relkind}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG                                              AS datname,
#  ┃        relnamespace::RegNamespace                                   AS nspname,
#  ┃        relname,
#  ┃        relkind,
#  ┃        relpages,
#  ┃        reltuples,
#  ┃        CASE WHEN relkind = 'i' THEN NULL ELSE age(relfrozenxid) END AS relage,
#  ┃        pg_relation_size(pc.oid)                                     AS relsize
#  ┃ FROM pg_class pc
#  ┃          LEFT JOIN pg_namespace pn on pc.relnamespace = pn.oid
#  ┃ WHERE (nspname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR nspname = 'user_search')
#  ┃     AND relkind IN ('r', 'i', 'm', 't');
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_class_shard:
  name: pg_class
  desc: Postgres relation statistic, db level , shard version

  query: |
    SELECT CURRENT_CATALOG                                              AS datname,
           relnamespace::RegNamespace                                   AS nspname,
           relname,
           relkind,
           relpages,
           reltuples,
           CASE WHEN relkind = 'i' THEN NULL ELSE age(relfrozenxid) END AS relage,
           pg_relation_size(pc.oid)                                     AS relsize
    FROM pg_class pc
             LEFT JOIN pg_namespace pn on pc.relnamespace = pn.oid
    WHERE (nspname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR nspname = 'user_search')
        AND relkind IN ('r', 'i', 'm', 't');

  ttl: 100
  timeout: 1
  tags: [shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this relation
    - nspname:
        usage: LABEL
        description: schema name of this relation
    - relname:
        usage: LABEL
        description: relation name of this relation
    - relkind:
        usage: LABEL
        description: relation type r-table i-index s-sequence m-mview t-toast
    - relpages:
        usage: GAUGE
        description: exact page count of this relation
    - reltuples:
        usage: GAUGE
        description: estimate relation tuples
    - relage:
        usage: GAUGE
        description: age of non-index relation
    - relsize:
        usage: GAUGE
        description: size of this relation


#-------------------------------------------------------------#
# pg_table
# note that database with tremendous of tables may suffer from
# this query. Use sampling filter or just disable it in that case
#-------------------------------------------------------------#


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_table
#  ┃ PostgreSQL table statistics, db level, normal version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [not:shard]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 122
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 131-pg_table.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this relation
#  ┃ LABEL    nspname              schema name of this relation
#  ┃ LABEL    relname              relation name of this relation
#  ┃ COUNTER  seq_scan             sequential scans initiated on this table
#  ┃ COUNTER  seq_tup_read         live rows fetched by sequential scans
#  ┃ COUNTER  idx_scan             index scans initiated on this table
#  ┃ COUNTER  idx_tup_fetch        rows fetched by index scans
#  ┃ COUNTER  tbl_scan             total table scan = index scan + seq scan
#  ┃ COUNTER  tup_read             total tuples read = index fetch + seq read
#  ┃ COUNTER  n_tup_ins            rows inserted
#  ┃ COUNTER  n_tup_upd            rows updated
#  ┃ COUNTER  n_tup_del            rows deleted
#  ┃ COUNTER  n_tup_mod            rows modified (insert + update + delete)
#  ┃ COUNTER  n_tup_hot_upd        rows updated in HOT mode
#  ┃ GAUGE    n_live_tup           estimated live rows
#  ┃ GAUGE    n_dead_tup           estimated dead rows
#  ┃ GAUGE    n_mod_since_analyze  rows changed since last analyze
#  ┃ GAUGE    last_vacuum          when table was manually vacuumed last time (FULL not count)
#  ┃ GAUGE    last_autovacuum      when table was automatically vacuumed last time
#  ┃ GAUGE    last_analyze         when table was manually analyzed last time
#  ┃ GAUGE    last_autoanalyze     when table was automatically analyzed last time
#  ┃ COUNTER  vacuum_count         manual vacuum count (FULL not count)
#  ┃ COUNTER  autovacuum_count     automatic vacuum count
#  ┃ COUNTER  analyze_count        manual analyze count
#  ┃ COUNTER  autoanalyze_count    automatic analyze count
#  ┃ COUNTER  heap_blks_read       relation heap read
#  ┃ COUNTER  heap_blks_hit        relation heap hit
#  ┃ COUNTER  idx_blks_read        index read
#  ┃ COUNTER  idx_blks_hit         index hit
#  ┃ COUNTER  toast_blks_read      toast heap read
#  ┃ COUNTER  toast_blks_hit       toast heap hit
#  ┃ COUNTER  tidx_blks_read       toast index read
#  ┃ COUNTER  tidx_blks_hit        toast index hit
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_table_seq_scan{datname,nspname,relname}
#  ┃ pg_table_seq_tup_read{datname,nspname,relname}
#  ┃ pg_table_idx_scan{datname,nspname,relname}
#  ┃ pg_table_idx_tup_fetch{datname,nspname,relname}
#  ┃ pg_table_tbl_scan{datname,nspname,relname}
#  ┃ pg_table_tup_read{datname,nspname,relname}
#  ┃ pg_table_n_tup_ins{datname,nspname,relname}
#  ┃ pg_table_n_tup_upd{datname,nspname,relname}
#  ┃ pg_table_n_tup_del{datname,nspname,relname}
#  ┃ pg_table_n_tup_mod{datname,nspname,relname}
#  ┃ pg_table_n_tup_hot_upd{datname,nspname,relname}
#  ┃ pg_table_n_live_tup{datname,nspname,relname}
#  ┃ pg_table_n_dead_tup{datname,nspname,relname}
#  ┃ pg_table_n_mod_since_analyze{datname,nspname,relname}
#  ┃ pg_table_last_vacuum{datname,nspname,relname}
#  ┃ pg_table_last_autovacuum{datname,nspname,relname}
#  ┃ pg_table_last_analyze{datname,nspname,relname}
#  ┃ pg_table_last_autoanalyze{datname,nspname,relname}
#  ┃ pg_table_vacuum_count{datname,nspname,relname}
#  ┃ pg_table_autovacuum_count{datname,nspname,relname}
#  ┃ pg_table_analyze_count{datname,nspname,relname}
#  ┃ pg_table_autoanalyze_count{datname,nspname,relname}
#  ┃ pg_table_heap_blks_read{datname,nspname,relname}
#  ┃ pg_table_heap_blks_hit{datname,nspname,relname}
#  ┃ pg_table_idx_blks_read{datname,nspname,relname}
#  ┃ pg_table_idx_blks_hit{datname,nspname,relname}
#  ┃ pg_table_toast_blks_read{datname,nspname,relname}
#  ┃ pg_table_toast_blks_hit{datname,nspname,relname}
#  ┃ pg_table_tidx_blks_read{datname,nspname,relname}
#  ┃ pg_table_tidx_blks_hit{datname,nspname,relname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG                     AS datname,
#  ┃        psut.schemaname                     AS nspname,
#  ┃        psut.relname,
#  ┃        seq_scan,
#  ┃        seq_tup_read,
#  ┃        idx_scan,
#  ┃        idx_tup_fetch,
#  ┃        seq_scan + idx_scan                 AS tbl_scan,
#  ┃        seq_tup_read + idx_tup_fetch        AS tup_read,
#  ┃        n_tup_ins,
#  ┃        n_tup_upd,
#  ┃        n_tup_del,
#  ┃        (n_tup_ins + n_tup_upd + n_tup_del) AS n_tup_mod,
#  ┃        n_tup_hot_upd,
#  ┃        n_live_tup,
#  ┃        n_dead_tup,
#  ┃        n_mod_since_analyze,
#  ┃        last_vacuum,
#  ┃        last_autovacuum,
#  ┃        last_analyze,
#  ┃        last_autoanalyze,
#  ┃        vacuum_count,
#  ┃        autovacuum_count,
#  ┃        analyze_count,
#  ┃        autoanalyze_count,
#  ┃        heap_blks_read,
#  ┃        heap_blks_hit,
#  ┃        idx_blks_read,
#  ┃        idx_blks_hit,
#  ┃        toast_blks_read,
#  ┃        toast_blks_hit,
#  ┃        tidx_blks_read,
#  ┃        tidx_blks_hit
#  ┃ FROM pg_stat_user_tables psut,
#  ┃      LATERAL (SELECT * FROM pg_statio_user_tables psio WHERE psio.relid = psut.relid) p;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_table:
  name: pg_table
  desc: PostgreSQL table statistics, db level, normal version

  query: |
    SELECT CURRENT_CATALOG                     AS datname,
           psut.schemaname                     AS nspname,
           psut.relname,
           seq_scan,
           seq_tup_read,
           idx_scan,
           idx_tup_fetch,
           seq_scan + idx_scan                 AS tbl_scan,
           seq_tup_read + idx_tup_fetch        AS tup_read,
           n_tup_ins,
           n_tup_upd,
           n_tup_del,
           (n_tup_ins + n_tup_upd + n_tup_del) AS n_tup_mod,
           n_tup_hot_upd,
           n_live_tup,
           n_dead_tup,
           n_mod_since_analyze,
           last_vacuum,
           last_autovacuum,
           last_analyze,
           last_autoanalyze,
           vacuum_count,
           autovacuum_count,
           analyze_count,
           autoanalyze_count,
           heap_blks_read,
           heap_blks_hit,
           idx_blks_read,
           idx_blks_hit,
           toast_blks_read,
           toast_blks_hit,
           tidx_blks_read,
           tidx_blks_hit
    FROM pg_stat_user_tables psut,
         LATERAL (SELECT * FROM pg_statio_user_tables psio WHERE psio.relid = psut.relid) p;

  ttl: 10
  timeout: 1
  tags: [not:shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this relation
    - nspname:
        usage: LABEL
        description: schema name of this relation
    - relname:
        usage: LABEL
        description: relation name of this relation
    - seq_scan:
        usage: COUNTER
        description: sequential scans initiated on this table
    - seq_tup_read:
        usage: COUNTER
        description: live rows fetched by sequential scans
    - idx_scan:
        usage: COUNTER
        description: index scans initiated on this table
    - idx_tup_fetch:
        usage: COUNTER
        description: rows fetched by index scans
    - tbl_scan:
        usage: COUNTER
        description: total table scan = index scan + seq scan
    - tup_read:
        usage: COUNTER
        description: total tuples read = index fetch + seq read
    - n_tup_ins:
        usage: COUNTER
        description: rows inserted
    - n_tup_upd:
        usage: COUNTER
        description: rows updated
    - n_tup_del:
        usage: COUNTER
        description: rows deleted
    - n_tup_mod:
        usage: COUNTER
        description: rows modified (insert + update + delete)
    - n_tup_hot_upd:
        usage: COUNTER
        description: rows updated in HOT mode
    - n_live_tup:
        usage: GAUGE
        description: estimated live rows
    - n_dead_tup:
        usage: GAUGE
        description: estimated dead rows
    - n_mod_since_analyze:
        usage: GAUGE
        description: rows changed since last analyze
    - last_vacuum:
        usage: GAUGE
        description: when table was manually vacuumed last time (FULL not count)
    - last_autovacuum:
        usage: GAUGE
        description: when table was automatically vacuumed last time
    - last_analyze:
        usage: GAUGE
        description: when table was manually analyzed last time
    - last_autoanalyze:
        usage: GAUGE
        description: when table was automatically analyzed last time
    - vacuum_count:
        usage: COUNTER
        description: manual vacuum count (FULL not count)
    - autovacuum_count:
        usage: COUNTER
        description: automatic vacuum count
    - analyze_count:
        usage: COUNTER
        description: manual analyze count
    - autoanalyze_count:
        usage: COUNTER
        description: automatic analyze count
    - heap_blks_read:
        usage: COUNTER
        description: relation heap read
    - heap_blks_hit:
        usage: COUNTER
        description: relation heap hit
    - idx_blks_read:
        usage: COUNTER
        description: index read
    - idx_blks_hit:
        usage: COUNTER
        description: index hit
    - toast_blks_read:
        usage: COUNTER
        description: toast heap read
    - toast_blks_hit:
        usage: COUNTER
        description: toast heap hit
    - tidx_blks_read:
        usage: COUNTER
        description: toast index read
    - tidx_blks_hit:
        usage: COUNTER
        description: toast index hit




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_table.pg_table_shard
#  ┃ PostgreSQL table statistics, db level, shard version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [shard]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 122
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 122-pg_table.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this relation
#  ┃ LABEL    nspname              schema name of this relation
#  ┃ LABEL    relname              relation name of this relation
#  ┃ COUNTER  seq_scan             sequential scans initiated on this table
#  ┃ COUNTER  seq_tup_read         live rows fetched by sequential scans
#  ┃ COUNTER  idx_scan             index scans initiated on this table
#  ┃ COUNTER  idx_tup_fetch        rows fetched by index scans
#  ┃ COUNTER  tbl_scan             total table scan = index scan + seq scan
#  ┃ COUNTER  tup_read             total tuples read = index fetch + seq read
#  ┃ COUNTER  n_tup_ins            rows inserted
#  ┃ COUNTER  n_tup_upd            rows updated
#  ┃ COUNTER  n_tup_del            rows deleted
#  ┃ COUNTER  n_tup_mod            rows modified (insert + update + delete)
#  ┃ COUNTER  n_tup_hot_upd        rows updated in HOT mode
#  ┃ GAUGE    n_live_tup           estimated live rows
#  ┃ GAUGE    n_dead_tup           estimated dead rows
#  ┃ GAUGE    n_mod_since_analyze  rows changed since last analyze
#  ┃ GAUGE    last_vacuum          when table was manually vacuumed last time (FULL not count)
#  ┃ GAUGE    last_autovacuum      when table was automatically vacuumed last time
#  ┃ GAUGE    last_analyze         when table was manually analyzed last time
#  ┃ GAUGE    last_autoanalyze     when table was automatically analyzed last time
#  ┃ COUNTER  vacuum_count         manual vacuum count (FULL not count)
#  ┃ COUNTER  autovacuum_count     automatic vacuum count
#  ┃ COUNTER  analyze_count        manual analyze count
#  ┃ COUNTER  autoanalyze_count    automatic analyze count
#  ┃ COUNTER  heap_blks_read       relation heap read
#  ┃ COUNTER  heap_blks_hit        relation heap hit
#  ┃ COUNTER  idx_blks_read        index read
#  ┃ COUNTER  idx_blks_hit         index hit
#  ┃ COUNTER  toast_blks_read      toast heap read
#  ┃ COUNTER  toast_blks_hit       toast heap hit
#  ┃ COUNTER  tidx_blks_read       toast index read
#  ┃ COUNTER  tidx_blks_hit        toast index hit
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_table_seq_scan{datname,nspname,relname}
#  ┃ pg_table_seq_tup_read{datname,nspname,relname}
#  ┃ pg_table_idx_scan{datname,nspname,relname}
#  ┃ pg_table_idx_tup_fetch{datname,nspname,relname}
#  ┃ pg_table_tbl_scan{datname,nspname,relname}
#  ┃ pg_table_tup_read{datname,nspname,relname}
#  ┃ pg_table_n_tup_ins{datname,nspname,relname}
#  ┃ pg_table_n_tup_upd{datname,nspname,relname}
#  ┃ pg_table_n_tup_del{datname,nspname,relname}
#  ┃ pg_table_n_tup_mod{datname,nspname,relname}
#  ┃ pg_table_n_tup_hot_upd{datname,nspname,relname}
#  ┃ pg_table_n_live_tup{datname,nspname,relname}
#  ┃ pg_table_n_dead_tup{datname,nspname,relname}
#  ┃ pg_table_n_mod_since_analyze{datname,nspname,relname}
#  ┃ pg_table_last_vacuum{datname,nspname,relname}
#  ┃ pg_table_last_autovacuum{datname,nspname,relname}
#  ┃ pg_table_last_analyze{datname,nspname,relname}
#  ┃ pg_table_last_autoanalyze{datname,nspname,relname}
#  ┃ pg_table_vacuum_count{datname,nspname,relname}
#  ┃ pg_table_autovacuum_count{datname,nspname,relname}
#  ┃ pg_table_analyze_count{datname,nspname,relname}
#  ┃ pg_table_autoanalyze_count{datname,nspname,relname}
#  ┃ pg_table_heap_blks_read{datname,nspname,relname}
#  ┃ pg_table_heap_blks_hit{datname,nspname,relname}
#  ┃ pg_table_idx_blks_read{datname,nspname,relname}
#  ┃ pg_table_idx_blks_hit{datname,nspname,relname}
#  ┃ pg_table_toast_blks_read{datname,nspname,relname}
#  ┃ pg_table_toast_blks_hit{datname,nspname,relname}
#  ┃ pg_table_tidx_blks_read{datname,nspname,relname}
#  ┃ pg_table_tidx_blks_hit{datname,nspname,relname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG                     AS datname,
#  ┃        psut.schemaname                     AS nspname,
#  ┃        psut.relname,
#  ┃        seq_scan,
#  ┃        seq_tup_read,
#  ┃        idx_scan,
#  ┃        idx_tup_fetch,
#  ┃        seq_scan + idx_scan                 AS tbl_scan,
#  ┃        seq_tup_read + idx_tup_fetch        AS tup_read,
#  ┃        n_tup_ins,
#  ┃        n_tup_upd,
#  ┃        n_tup_del,
#  ┃        (n_tup_ins + n_tup_upd + n_tup_del) AS n_tup_mod,
#  ┃        n_tup_hot_upd,
#  ┃        n_live_tup,
#  ┃        n_dead_tup,
#  ┃        n_mod_since_analyze,
#  ┃        last_vacuum,
#  ┃        last_autovacuum,
#  ┃        last_analyze,
#  ┃        last_autoanalyze,
#  ┃        vacuum_count,
#  ┃        autovacuum_count,
#  ┃        analyze_count,
#  ┃        autoanalyze_count,
#  ┃        heap_blks_read,
#  ┃        heap_blks_hit,
#  ┃        idx_blks_read,
#  ┃        idx_blks_hit,
#  ┃        toast_blks_read,
#  ┃        toast_blks_hit,
#  ┃        tidx_blks_read,
#  ┃        tidx_blks_hit
#  ┃ FROM pg_stat_user_tables psut,
#  ┃      LATERAL (SELECT * FROM pg_statio_user_tables psio WHERE psio.relid = psut.relid) p
#  ┃ WHERE (psut.schemaname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR psut.schemaname = 'user_search');
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_table_shard:
  name: pg_table
  desc: PostgreSQL table statistics, db level, shard version

  query: |
    SELECT CURRENT_CATALOG                     AS datname,
           psut.schemaname                     AS nspname,
           psut.relname,
           seq_scan,
           seq_tup_read,
           idx_scan,
           idx_tup_fetch,
           seq_scan + idx_scan                 AS tbl_scan,
           seq_tup_read + idx_tup_fetch        AS tup_read,
           n_tup_ins,
           n_tup_upd,
           n_tup_del,
           (n_tup_ins + n_tup_upd + n_tup_del) AS n_tup_mod,
           n_tup_hot_upd,
           n_live_tup,
           n_dead_tup,
           n_mod_since_analyze,
           last_vacuum,
           last_autovacuum,
           last_analyze,
           last_autoanalyze,
           vacuum_count,
           autovacuum_count,
           analyze_count,
           autoanalyze_count,
           heap_blks_read,
           heap_blks_hit,
           idx_blks_read,
           idx_blks_hit,
           toast_blks_read,
           toast_blks_hit,
           tidx_blks_read,
           tidx_blks_hit
    FROM pg_stat_user_tables psut,
         LATERAL (SELECT * FROM pg_statio_user_tables psio WHERE psio.relid = psut.relid) p
    WHERE (psut.schemaname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR psut.schemaname = 'user_search');

  ttl: 10
  timeout: 1
  tags: [shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this relation
    - nspname:
        usage: LABEL
        description: schema name of this relation
    - relname:
        usage: LABEL
        description: relation name of this relation
    - seq_scan:
        usage: COUNTER
        description: sequential scans initiated on this table
    - seq_tup_read:
        usage: COUNTER
        description: live rows fetched by sequential scans
    - idx_scan:
        usage: COUNTER
        description: index scans initiated on this table
    - idx_tup_fetch:
        usage: COUNTER
        description: rows fetched by index scans
    - tbl_scan:
        usage: COUNTER
        description: total table scan = index scan + seq scan
    - tup_read:
        usage: COUNTER
        description: total tuples read = index fetch + seq read
    - n_tup_ins:
        usage: COUNTER
        description: rows inserted
    - n_tup_upd:
        usage: COUNTER
        description: rows updated
    - n_tup_del:
        usage: COUNTER
        description: rows deleted
    - n_tup_mod:
        usage: COUNTER
        description: rows modified (insert + update + delete)
    - n_tup_hot_upd:
        usage: COUNTER
        description: rows updated in HOT mode
    - n_live_tup:
        usage: GAUGE
        description: estimated live rows
    - n_dead_tup:
        usage: GAUGE
        description: estimated dead rows
    - n_mod_since_analyze:
        usage: GAUGE
        description: rows changed since last analyze
    - last_vacuum:
        usage: GAUGE
        description: when table was manually vacuumed last time (FULL not count)
    - last_autovacuum:
        usage: GAUGE
        description: when table was automatically vacuumed last time
    - last_analyze:
        usage: GAUGE
        description: when table was manually analyzed last time
    - last_autoanalyze:
        usage: GAUGE
        description: when table was automatically analyzed last time
    - vacuum_count:
        usage: COUNTER
        description: manual vacuum count (FULL not count)
    - autovacuum_count:
        usage: COUNTER
        description: automatic vacuum count
    - analyze_count:
        usage: COUNTER
        description: manual analyze count
    - autoanalyze_count:
        usage: COUNTER
        description: automatic analyze count
    - heap_blks_read:
        usage: COUNTER
        description: relation heap read
    - heap_blks_hit:
        usage: COUNTER
        description: relation heap hit
    - idx_blks_read:
        usage: COUNTER
        description: index read
    - idx_blks_hit:
        usage: COUNTER
        description: index hit
    - toast_blks_read:
        usage: COUNTER
        description: toast heap read
    - toast_blks_hit:
        usage: COUNTER
        description: toast heap hit
    - tidx_blks_read:
        usage: COUNTER
        description: toast index read
    - tidx_blks_hit:
        usage: COUNTER
        description: toast index hit


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_table_size
#  ┃ PostgreSQL table size detail, db level, normal version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [not:shard]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 123
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 100000 ~ higher
#  ┃ Source   ┆ 132-pg_table_size.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this relation
#  ┃ LABEL    nspname              schema name of this relation
#  ┃ LABEL    relname              relation name of this relation
#  ┃ GAUGE    bytes                total size of this table (including toast, index, toast index)
#  ┃ GAUGE    relsize              size of this table itself (main, vm, fsm)
#  ┃ GAUGE    indexsize            size of all related indexes
#  ┃ GAUGE    toastsize            size of corresponding toast tables
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_table_size_bytes{datname,nspname,relname}
#  ┃ pg_table_size_relsize{datname,nspname,relname}
#  ┃ pg_table_size_indexsize{datname,nspname,relname}
#  ┃ pg_table_size_toastsize{datname,nspname,relname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG                       AS datname,
#  ┃        nsp.nspname,
#  ┃        rel.relname,
#  ┃        pg_total_relation_size(rel.oid)       AS bytes,
#  ┃        pg_relation_size(rel.oid)             AS relsize,
#  ┃        pg_indexes_size(rel.oid)              AS indexsize,
#  ┃        pg_total_relation_size(reltoastrelid) AS toastsize
#  ┃ FROM pg_namespace nsp
#  ┃          JOIN pg_class rel ON nsp.oid = rel.relnamespace
#  ┃ WHERE nspname NOT IN ('pg_catalog', 'information_schema')
#  ┃   AND rel.relkind = 'r';
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_table_size:
  name: pg_table_size
  desc: PostgreSQL table size detail, db level, normal version

  query: |
    SELECT CURRENT_CATALOG                       AS datname,
           nsp.nspname,
           rel.relname,
           pg_total_relation_size(rel.oid)       AS bytes,
           pg_relation_size(rel.oid)             AS relsize,
           pg_indexes_size(rel.oid)              AS indexsize,
           pg_total_relation_size(reltoastrelid) AS toastsize
    FROM pg_namespace nsp
             JOIN pg_class rel ON nsp.oid = rel.relnamespace
    WHERE nspname NOT IN ('pg_catalog', 'information_schema')
      AND rel.relkind = 'r';

  ttl: 100
  timeout: 1
  tags: [not:shard]
  min_version: 100000

  metrics:
    - datname:
        usage: LABEL
        description: database name of this relation
    - nspname:
        usage: LABEL
        description: schema name of this relation
    - relname:
        usage: LABEL
        description: relation name of this relation
    - bytes:
        usage: GAUGE
        description: total size of this table (including toast, index, toast index)
    - relsize:
        usage: GAUGE
        description: size of this table itself (main, vm, fsm)
    - indexsize:
        usage: GAUGE
        description: size of all related indexes
    - toastsize:
        usage: GAUGE
        description: size of corresponding toast tables




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_table_size.pg_table_size_shard
#  ┃ PostgreSQL table size detail, db level, shard version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [shard]
#  ┃ TTL      ┆ 200
#  ┃ Priority ┆ 123
#  ┃ Timeout  ┆ 2s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 100000 ~ higher
#  ┃ Source   ┆ 123-pg_table_size.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this relation
#  ┃ LABEL    nspname              schema name of this relation
#  ┃ LABEL    relname              relation name of this relation
#  ┃ GAUGE    bytes                total size of this table (including toast, index, toast index)
#  ┃ GAUGE    relsize              size of this table itself (main, vm, fsm)
#  ┃ GAUGE    indexsize            size of all related indexes
#  ┃ GAUGE    toastsize            size of corresponding toast tables
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_table_size_bytes{datname,nspname,relname}
#  ┃ pg_table_size_relsize{datname,nspname,relname}
#  ┃ pg_table_size_indexsize{datname,nspname,relname}
#  ┃ pg_table_size_toastsize{datname,nspname,relname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG                       AS datname,
#  ┃        nsp.nspname,
#  ┃        rel.relname,
#  ┃        pg_total_relation_size(rel.oid)       AS bytes,
#  ┃        pg_relation_size(rel.oid)             AS relsize,
#  ┃        pg_indexes_size(rel.oid)              AS indexsize,
#  ┃        pg_total_relation_size(reltoastrelid) AS toastsize
#  ┃ FROM pg_namespace nsp
#  ┃          JOIN pg_class rel ON nsp.oid = rel.relnamespace
#  ┃ WHERE rel.relkind = 'r' AND
#  ┃       (nsp.nspname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR nsp.nspname = 'user_search');
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_table_size_shard:
  name: pg_table_size
  desc: PostgreSQL table size detail, db level, shard version

  query: |
    SELECT CURRENT_CATALOG                       AS datname,
           nsp.nspname,
           rel.relname,
           pg_total_relation_size(rel.oid)       AS bytes,
           pg_relation_size(rel.oid)             AS relsize,
           pg_indexes_size(rel.oid)              AS indexsize,
           pg_total_relation_size(reltoastrelid) AS toastsize
    FROM pg_namespace nsp
             JOIN pg_class rel ON nsp.oid = rel.relnamespace
    WHERE rel.relkind = 'r' AND
          (nsp.nspname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR nsp.nspname = 'user_search');

  ttl: 200
  timeout: 2
  tags: [shard]
  min_version: 100000

  metrics:
    - datname:
        usage: LABEL
        description: database name of this relation
    - nspname:
        usage: LABEL
        description: schema name of this relation
    - relname:
        usage: LABEL
        description: relation name of this relation
    - bytes:
        usage: GAUGE
        description: total size of this table (including toast, index, toast index)
    - relsize:
        usage: GAUGE
        description: size of this table itself (main, vm, fsm)
    - indexsize:
        usage: GAUGE
        description: size of all related indexes
    - toastsize:
        usage: GAUGE
        description: size of corresponding toast tables




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_defpart.pg_defpart
#  ┃ PostgreSQL default partition tuples, db level
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [not:shard]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 124
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 110000 ~ higher
#  ┃ Source   ┆ 133-pg_defpart.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this relation
#  ┃ LABEL    nspname              schema name of this relation
#  ┃ LABEL    relname              relation name of this relation
#  ┃ GAUGE    tuples               number of tuples in this partition
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_defpart_tuples{datname,nspname,relname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG            AS datname,
#  ┃        relnamespace::RegNamespace AS nspname,
#  ┃        relname,
#  ┃        reltuples                  AS tuples
#  ┃ FROM pg_class
#  ┃ WHERE relpartbound IS NOT NULL
#  ┃   AND pg_catalog.pg_get_expr(relpartbound, oid) = 'DEFAULT';
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_defpart:
  name: pg_defpart
  desc: PostgreSQL default partition tuples, db level

  query: |
    SELECT CURRENT_CATALOG            AS datname,
           relnamespace::RegNamespace AS nspname,
           relname,
           reltuples                  AS tuples
    FROM pg_class
    WHERE relpartbound IS NOT NULL
      AND pg_catalog.pg_get_expr(relpartbound, oid) = 'DEFAULT';

  ttl: 100
  timeout: 1
  tags: [not:shard]
  min_version: 110000

  metrics:
    - datname:
        usage: LABEL
        description: database name of this relation
    - nspname:
        usage: LABEL
        description: schema name of this relation
    - relname:
        usage: LABEL
        description: relation name of this relation
    - tuples:
        usage: GAUGE
        description: number of tuples in this partition




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_table_bloat
#  ┃ PostgreSQL table bloat statistics, db level, normal version, require pg_stats access
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [not:shard]
#  ┃ TTL      ┆ 100
#  ┃ Priority ┆ 125
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 133-pg_table_bloat.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this table
#  ┃ LABEL    nspname              schema name of this table
#  ┃ LABEL    relname              relation name of this table
#  ┃ GAUGE    size                 total size in bytes of this table
#  ┃ GAUGE    ratio                estimated bloat ratio of this table, 0~1
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_table_bloat_size{datname,nspname,relname}
#  ┃ pg_table_bloat_ratio{datname,nspname,relname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG AS datname, nspname, relname , bs * tblpages AS size,
#  ┃        CASE WHEN tblpages - est_tblpages_ff > 0 THEN (tblpages - est_tblpages_ff)/tblpages::FLOAT ELSE 0 END AS ratio
#  ┃ FROM (
#  ┃          SELECT ceil( reltuples / ( (bs-page_hdr)*fillfactor/(tpl_size*100) ) ) + ceil( toasttuples / 4 ) AS est_tblpages_ff,
#  ┃                 tblpages, fillfactor, bs, tblid, nspname, relname, is_na
#  ┃          FROM (
#  ┃                   SELECT
#  ┃                       ( 4 + tpl_hdr_size + tpl_data_size + (2 * ma)
#  ┃                           - CASE WHEN tpl_hdr_size % ma = 0 THEN ma ELSE tpl_hdr_size % ma END
#  ┃                           - CASE WHEN ceil(tpl_data_size)::INT % ma = 0 THEN ma ELSE ceil(tpl_data_size)::INT % ma END
#  ┃                           ) AS tpl_size, (heappages + toastpages) AS tblpages, heappages,
#  ┃                       toastpages, reltuples, toasttuples, bs, page_hdr, tblid, nspname, relname, fillfactor, is_na
#  ┃                   FROM (
#  ┃                            SELECT
#  ┃                                tbl.oid AS tblid, ns.nspname , tbl.relname, tbl.reltuples,
#  ┃                                tbl.relpages AS heappages, coalesce(toast.relpages, 0) AS toastpages,
#  ┃                                coalesce(toast.reltuples, 0) AS toasttuples,
#  ┃                                coalesce(substring(array_to_string(tbl.reloptions, ' ') FROM 'fillfactor=([0-9]+)')::smallint, 100) AS fillfactor,
#  ┃                                current_setting('block_size')::numeric AS bs,
#  ┃                                CASE WHEN version()~'mingw32' OR version()~'64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS ma,
#  ┃                                24 AS page_hdr,
#  ┃                                23 + CASE WHEN MAX(coalesce(s.null_frac,0)) > 0 THEN ( 7 + count(s.attname) ) / 8 ELSE 0::int END
#  ┃                                    + CASE WHEN bool_or(att.attname = 'oid' and att.attnum < 0) THEN 4 ELSE 0 END AS tpl_hdr_size,
#  ┃                                sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 0) ) AS tpl_data_size,
#  ┃                                bool_or(att.atttypid = 'pg_catalog.name'::regtype)
#  ┃                                    OR sum(CASE WHEN att.attnum > 0 THEN 1 ELSE 0 END) <> count(s.attname) AS is_na
#  ┃                            FROM pg_attribute AS att
#  ┃                                     JOIN pg_class AS tbl ON att.attrelid = tbl.oid
#  ┃                                     JOIN pg_namespace AS ns ON ns.oid = tbl.relnamespace
#  ┃                                     LEFT JOIN pg_stats AS s ON s.schemaname=ns.nspname AND s.tablename = tbl.relname AND s.inherited=false AND s.attname=att.attname
#  ┃                                     LEFT JOIN pg_class AS toast ON tbl.reltoastrelid = toast.oid
#  ┃                            WHERE NOT att.attisdropped AND tbl.relkind = 'r' AND nspname NOT IN ('pg_catalog','information_schema')
#  ┃                            GROUP BY 1,2,3,4,5,6,7,8,9,10
#  ┃                        ) AS s
#  ┃               ) AS s2
#  ┃      ) AS s3
#  ┃ WHERE NOT is_na;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_table_bloat:
  name: pg_table_bloat
  desc: PostgreSQL table bloat statistics, db level, normal version, require pg_stats access

  query: |
    SELECT CURRENT_CATALOG AS datname, nspname, relname , bs * tblpages AS size,
           CASE WHEN tblpages - est_tblpages_ff > 0 THEN (tblpages - est_tblpages_ff)/tblpages::FLOAT ELSE 0 END AS ratio
    FROM (
             SELECT ceil( reltuples / ( (bs-page_hdr)*fillfactor/(tpl_size*100) ) ) + ceil( toasttuples / 4 ) AS est_tblpages_ff,
                    tblpages, fillfactor, bs, tblid, nspname, relname, is_na
             FROM (
                      SELECT
                          ( 4 + tpl_hdr_size + tpl_data_size + (2 * ma)
                              - CASE WHEN tpl_hdr_size % ma = 0 THEN ma ELSE tpl_hdr_size % ma END
                              - CASE WHEN ceil(tpl_data_size)::INT % ma = 0 THEN ma ELSE ceil(tpl_data_size)::INT % ma END
                              ) AS tpl_size, (heappages + toastpages) AS tblpages, heappages,
                          toastpages, reltuples, toasttuples, bs, page_hdr, tblid, nspname, relname, fillfactor, is_na
                      FROM (
                               SELECT
                                   tbl.oid AS tblid, ns.nspname , tbl.relname, tbl.reltuples,
                                   tbl.relpages AS heappages, coalesce(toast.relpages, 0) AS toastpages,
                                   coalesce(toast.reltuples, 0) AS toasttuples,
                                   coalesce(substring(array_to_string(tbl.reloptions, ' ') FROM 'fillfactor=([0-9]+)')::smallint, 100) AS fillfactor,
                                   current_setting('block_size')::numeric AS bs,
                                   CASE WHEN version()~'mingw32' OR version()~'64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS ma,
                                   24 AS page_hdr,
                                   23 + CASE WHEN MAX(coalesce(s.null_frac,0)) > 0 THEN ( 7 + count(s.attname) ) / 8 ELSE 0::int END
                                       + CASE WHEN bool_or(att.attname = 'oid' and att.attnum < 0) THEN 4 ELSE 0 END AS tpl_hdr_size,
                                   sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 0) ) AS tpl_data_size,
                                   bool_or(att.atttypid = 'pg_catalog.name'::regtype)
                                       OR sum(CASE WHEN att.attnum > 0 THEN 1 ELSE 0 END) <> count(s.attname) AS is_na
                               FROM pg_attribute AS att
                                        JOIN pg_class AS tbl ON att.attrelid = tbl.oid
                                        JOIN pg_namespace AS ns ON ns.oid = tbl.relnamespace
                                        LEFT JOIN pg_stats AS s ON s.schemaname=ns.nspname AND s.tablename = tbl.relname AND s.inherited=false AND s.attname=att.attname
                                        LEFT JOIN pg_class AS toast ON tbl.reltoastrelid = toast.oid
                               WHERE NOT att.attisdropped AND tbl.relkind = 'r' AND nspname NOT IN ('pg_catalog','information_schema')
                               GROUP BY 1,2,3,4,5,6,7,8,9,10
                           ) AS s
                  ) AS s2
         ) AS s3
    WHERE NOT is_na;

  ttl: 100
  timeout: 1
  tags: [not:shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this table
    - nspname:
        usage: LABEL
        description: schema name of this table
    - relname:
        usage: LABEL
        description: relation name of this table
    - size:
        usage: GAUGE
        description: total size in bytes of this table
    - ratio:
        usage: GAUGE
        description: estimated bloat ratio of this table, 0~1




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_table_bloat.pg_table_bloat_shard
#  ┃ PostgreSQL table bloat statistics, db level, shard version, require pg_stats access
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [shard]
#  ┃ TTL      ┆ 200
#  ┃ Priority ┆ 125
#  ┃ Timeout  ┆ 3s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 125-pg_table_bloat.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this table
#  ┃ LABEL    nspname              schema name of this table
#  ┃ LABEL    relname              relation name of this table
#  ┃ GAUGE    size                 total size in bytes of this table
#  ┃ GAUGE    ratio                estimated bloat ratio of this table, 0~1
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_table_bloat_size{datname,nspname,relname}
#  ┃ pg_table_bloat_ratio{datname,nspname,relname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG AS datname, nspname, relname , bs * tblpages AS size,
#  ┃        CASE WHEN tblpages - est_tblpages_ff > 0 THEN (tblpages - est_tblpages_ff)/tblpages::FLOAT ELSE 0 END AS ratio
#  ┃ FROM (
#  ┃          SELECT ceil( reltuples / ( (bs-page_hdr)*fillfactor/(tpl_size*100) ) ) + ceil( toasttuples / 4 ) AS est_tblpages_ff,
#  ┃                 tblpages, fillfactor, bs, tblid, nspname, relname, is_na
#  ┃          FROM (
#  ┃                   SELECT
#  ┃                       ( 4 + tpl_hdr_size + tpl_data_size + (2 * ma)
#  ┃                           - CASE WHEN tpl_hdr_size % ma = 0 THEN ma ELSE tpl_hdr_size % ma END
#  ┃                           - CASE WHEN ceil(tpl_data_size)::INT % ma = 0 THEN ma ELSE ceil(tpl_data_size)::INT % ma END
#  ┃                           ) AS tpl_size, (heappages + toastpages) AS tblpages, heappages,
#  ┃                       toastpages, reltuples, toasttuples, bs, page_hdr, tblid, nspname, relname, fillfactor, is_na
#  ┃                   FROM (
#  ┃                            SELECT
#  ┃                                tbl.oid AS tblid, ns.nspname , tbl.relname, tbl.reltuples,
#  ┃                                tbl.relpages AS heappages, coalesce(toast.relpages, 0) AS toastpages,
#  ┃                                coalesce(toast.reltuples, 0) AS toasttuples,
#  ┃                                coalesce(substring(array_to_string(tbl.reloptions, ' ') FROM 'fillfactor=([0-9]+)')::smallint, 100) AS fillfactor,
#  ┃                                current_setting('block_size')::numeric AS bs,
#  ┃                                CASE WHEN version()~'mingw32' OR version()~'64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS ma,
#  ┃                                24 AS page_hdr,
#  ┃                                23 + CASE WHEN MAX(coalesce(s.null_frac,0)) > 0 THEN ( 7 + count(s.attname) ) / 8 ELSE 0::int END
#  ┃                                    + CASE WHEN bool_or(att.attname = 'oid' and att.attnum < 0) THEN 4 ELSE 0 END AS tpl_hdr_size,
#  ┃                                sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 0) ) AS tpl_data_size,
#  ┃                                bool_or(att.atttypid = 'pg_catalog.name'::regtype)
#  ┃                                    OR sum(CASE WHEN att.attnum > 0 THEN 1 ELSE 0 END) <> count(s.attname) AS is_na
#  ┃                            FROM pg_attribute AS att
#  ┃                                     JOIN pg_class AS tbl ON att.attrelid = tbl.oid
#  ┃                                     JOIN pg_namespace AS ns ON ns.oid = tbl.relnamespace
#  ┃                                     LEFT JOIN pg_stats AS s ON s.schemaname=ns.nspname AND s.tablename = tbl.relname AND s.inherited=false AND s.attname=att.attname
#  ┃                                     LEFT JOIN pg_class AS toast ON tbl.reltoastrelid = toast.oid
#  ┃                            WHERE NOT att.attisdropped AND tbl.relkind = 'r' AND (nspname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR nspname = 'user_search')
#  ┃                            GROUP BY 1,2,3,4,5,6,7,8,9,10
#  ┃                        ) AS s
#  ┃               ) AS s2
#  ┃      ) AS s3
#  ┃ WHERE NOT is_na;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_table_bloat_shard:
  name: pg_table_bloat
  desc: PostgreSQL table bloat statistics, db level, shard version, require pg_stats access

  query: |
    SELECT CURRENT_CATALOG AS datname, nspname, relname , bs * tblpages AS size,
           CASE WHEN tblpages - est_tblpages_ff > 0 THEN (tblpages - est_tblpages_ff)/tblpages::FLOAT ELSE 0 END AS ratio
    FROM (
             SELECT ceil( reltuples / ( (bs-page_hdr)*fillfactor/(tpl_size*100) ) ) + ceil( toasttuples / 4 ) AS est_tblpages_ff,
                    tblpages, fillfactor, bs, tblid, nspname, relname, is_na
             FROM (
                      SELECT
                          ( 4 + tpl_hdr_size + tpl_data_size + (2 * ma)
                              - CASE WHEN tpl_hdr_size % ma = 0 THEN ma ELSE tpl_hdr_size % ma END
                              - CASE WHEN ceil(tpl_data_size)::INT % ma = 0 THEN ma ELSE ceil(tpl_data_size)::INT % ma END
                              ) AS tpl_size, (heappages + toastpages) AS tblpages, heappages,
                          toastpages, reltuples, toasttuples, bs, page_hdr, tblid, nspname, relname, fillfactor, is_na
                      FROM (
                               SELECT
                                   tbl.oid AS tblid, ns.nspname , tbl.relname, tbl.reltuples,
                                   tbl.relpages AS heappages, coalesce(toast.relpages, 0) AS toastpages,
                                   coalesce(toast.reltuples, 0) AS toasttuples,
                                   coalesce(substring(array_to_string(tbl.reloptions, ' ') FROM 'fillfactor=([0-9]+)')::smallint, 100) AS fillfactor,
                                   current_setting('block_size')::numeric AS bs,
                                   CASE WHEN version()~'mingw32' OR version()~'64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS ma,
                                   24 AS page_hdr,
                                   23 + CASE WHEN MAX(coalesce(s.null_frac,0)) > 0 THEN ( 7 + count(s.attname) ) / 8 ELSE 0::int END
                                       + CASE WHEN bool_or(att.attname = 'oid' and att.attnum < 0) THEN 4 ELSE 0 END AS tpl_hdr_size,
                                   sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 0) ) AS tpl_data_size,
                                   bool_or(att.atttypid = 'pg_catalog.name'::regtype)
                                       OR sum(CASE WHEN att.attnum > 0 THEN 1 ELSE 0 END) <> count(s.attname) AS is_na
                               FROM pg_attribute AS att
                                        JOIN pg_class AS tbl ON att.attrelid = tbl.oid
                                        JOIN pg_namespace AS ns ON ns.oid = tbl.relnamespace
                                        LEFT JOIN pg_stats AS s ON s.schemaname=ns.nspname AND s.tablename = tbl.relname AND s.inherited=false AND s.attname=att.attname
                                        LEFT JOIN pg_class AS toast ON tbl.reltoastrelid = toast.oid
                               WHERE NOT att.attisdropped AND tbl.relkind = 'r' AND (nspname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR nspname = 'user_search')
                               GROUP BY 1,2,3,4,5,6,7,8,9,10
                           ) AS s
                  ) AS s2
         ) AS s3
    WHERE NOT is_na;


  ttl: 200
  timeout: 3
  tags: [shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this table
    - nspname:
        usage: LABEL
        description: schema name of this table
    - relname:
        usage: LABEL
        description: relation name of this table
    - size:
        usage: GAUGE
        description: total size in bytes of this table
    - ratio:
        usage: GAUGE
        description: estimated bloat ratio of this table, 0~1



#-------------------------------------------------------------#
# pg_index
# note that database with tremendous of tables may suffer from
# this query. Use sampling filter or just disable it in that case
# https://www.postgresql.org/docs/9.4/monitoring-stats.html#PG-STATIO-ALL-INDEXES-VIEW
# https://www.postgresql.org/docs/9.4/monitoring-stats.html#PG-STAT-ALL-INDEXES-VIEW
#-------------------------------------------------------------#

pg_index:
  name: pg_index
  desc: PostgreSQL index statistics, db level, normal version

  query: |
    SELECT CURRENT_CATALOG AS datname,
           schemaname      AS nspname,
           indexrelname    AS relname,
           idx_scan,
           idx_tup_read,
           idx_tup_fetch,
           idx_blks_read,
           idx_blks_hit
    FROM pg_stat_user_indexes psui,
         LATERAL (SELECT idx_blks_read, idx_blks_hit FROM pg_statio_user_indexes psio
         WHERE psio.indexrelid = psui.indexrelid) p2;

  ttl: 10
  timeout: 1
  tags: [not:shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this relation
    - nspname:
        usage: LABEL
        description: schema name of this relation
    - relname:
        usage: LABEL
        description: relation name of this relation
    - idx_scan:
        usage: COUNTER
        description: index scans initiated on this index
    - idx_tup_read:
        usage: COUNTER
        description: index entries returned by scans on this index
    - idx_tup_fetch:
        usage: COUNTER
        description: live table rows fetched by simple index scans using this index
    - idx_blks_read:
        usage: COUNTER
        description: blocks been read from disk of this index
    - idx_blks_hit:
        usage: COUNTER
        description: blocks hit from cache of this index




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_index.pg_index_shard
#  ┃ PostgreSQL index statistics, db level, shard version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [shard]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 126
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 126-pg_index.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this relation
#  ┃ LABEL    nspname              schema name of this relation
#  ┃ LABEL    relname              relation name of this relation
#  ┃ COUNTER  idx_scan             index scans initiated on this index
#  ┃ COUNTER  idx_tup_read         index entries returned by scans on this index
#  ┃ COUNTER  idx_tup_fetch        live table rows fetched by simple index scans using this index
#  ┃ COUNTER  idx_blks_read        blocks been read from disk of this index
#  ┃ COUNTER  idx_blks_hit         blocks hit from cache of this index
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_index_idx_scan{datname,nspname,relname}
#  ┃ pg_index_idx_tup_read{datname,nspname,relname}
#  ┃ pg_index_idx_tup_fetch{datname,nspname,relname}
#  ┃ pg_index_idx_blks_read{datname,nspname,relname}
#  ┃ pg_index_idx_blks_hit{datname,nspname,relname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG AS datname,
#  ┃        schemaname      AS nspname,
#  ┃        indexrelname    AS relname,
#  ┃        idx_scan,
#  ┃        idx_tup_read,
#  ┃        idx_tup_fetch,
#  ┃        idx_blks_read,
#  ┃        idx_blks_hit
#  ┃ FROM pg_stat_user_indexes psui,
#  ┃      LATERAL (SELECT idx_blks_read, idx_blks_hit FROM pg_statio_user_indexes psio WHERE psio.indexrelid = psui.indexrelid) p2
#  ┃ WHERE psui.schemaname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR psui.schemaname = 'user_search';
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pg_index_shard:
  name: pg_index
  desc: PostgreSQL index statistics, db level, shard version

  query: |
    SELECT CURRENT_CATALOG AS datname,
           schemaname      AS nspname,
           indexrelname    AS relname,
           idx_scan,
           idx_tup_read,
           idx_tup_fetch,
           idx_blks_read,
           idx_blks_hit
    FROM pg_stat_user_indexes psui,
         LATERAL (SELECT idx_blks_read, idx_blks_hit FROM pg_statio_user_indexes psio WHERE psio.indexrelid = psui.indexrelid) p2
    WHERE psui.schemaname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR psui.schemaname = 'user_search';

  ttl: 10
  timeout: 1
  tags: [shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this relation
    - nspname:
        usage: LABEL
        description: schema name of this relation
    - relname:
        usage: LABEL
        description: relation name of this relation
    - idx_scan:
        usage: COUNTER
        description: index scans initiated on this index
    - idx_tup_read:
        usage: COUNTER
        description: index entries returned by scans on this index
    - idx_tup_fetch:
        usage: COUNTER
        description: live table rows fetched by simple index scans using this index
    - idx_blks_read:
        usage: COUNTER
        description: blocks been read from disk of this index
    - idx_blks_hit:
        usage: COUNTER
        description: blocks hit from cache of this index


#-------------------------------------------------------------#
# pg_index_bloat
# bloat index ratio, not all index are included (btree only)
#-------------------------------------------------------------#
pg_index_bloat:
  name: pg_index_bloat
  desc: PostgreSQL Index Bloat, btree only, db level, normal version

  query: |
    SELECT CURRENT_CATALOG AS datname, nspname, idxname AS relname, relpages::BIGINT * bs AS size,
           COALESCE((relpages - ( reltuples * (6 + ma - (CASE WHEN index_tuple_hdr % ma = 0 THEN ma ELSE index_tuple_hdr % ma END)
                                + nulldatawidth + ma - (CASE WHEN nulldatawidth % ma = 0 THEN ma ELSE nulldatawidth % ma END))
                       / (bs - pagehdr)::FLOAT  + 1 )), 0) / relpages::FLOAT AS ratio
    FROM (
         SELECT nspname,
                idxname,
                reltuples,
                relpages,
                current_setting('block_size')::INTEGER                                                               AS bs,
                (CASE WHEN version() ~ 'mingw32' OR version() ~ '64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END)  AS ma,
                24                                                                                                   AS pagehdr,
                (CASE WHEN max(COALESCE(pg_stats.null_frac, 0)) = 0 THEN 2 ELSE 6 END)                               AS index_tuple_hdr,
                sum((1.0 - COALESCE(pg_stats.null_frac, 0.0)) *
                    COALESCE(pg_stats.avg_width, 1024))::INTEGER                                                     AS nulldatawidth
         FROM pg_attribute
                  JOIN (
             SELECT pg_namespace.nspname,
                    ic.relname                                                   AS idxname,
                    ic.reltuples,
                    ic.relpages,
                    pg_index.indrelid,
                    pg_index.indexrelid,
                    tc.relname                                                   AS tablename,
                    regexp_split_to_table(pg_index.indkey::TEXT, ' ') :: INTEGER AS attnum,
                    pg_index.indexrelid                                          AS index_oid
             FROM pg_index
                      JOIN pg_class ic ON pg_index.indexrelid = ic.oid
                      JOIN pg_class tc ON pg_index.indrelid = tc.oid
                      JOIN pg_namespace ON pg_namespace.oid = ic.relnamespace
                      JOIN pg_am ON ic.relam = pg_am.oid
             WHERE pg_am.amname = 'btree' AND ic.relpages > 0 AND nspname NOT IN ('pg_catalog', 'information_schema')
         ) ind_atts ON pg_attribute.attrelid = ind_atts.indexrelid AND pg_attribute.attnum = ind_atts.attnum
                  JOIN pg_stats ON pg_stats.schemaname = ind_atts.nspname
                                       AND ((pg_stats.tablename = ind_atts.tablename AND pg_stats.attname = pg_get_indexdef(pg_attribute.attrelid, pg_attribute.attnum, TRUE))
                                                OR (pg_stats.tablename = ind_atts.idxname AND pg_stats.attname = pg_attribute.attname))
         WHERE pg_attribute.attnum > 0
         GROUP BY 1, 2, 3, 4, 5, 6
     ) est;

  ttl: 100
  timeout: 1
  tags: [not:shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this index
    - nspname:
        usage: LABEL
        description: schema name of this index
    - relname:
        usage: LABEL
        description: relation name of this index relation
    - size:
        usage: GAUGE
        description: total size in bytes of this index
    - ratio:
        usage: GAUGE
        description: estimated bloat ratio of this index, 0~1




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_index_bloat.pg_index_bloat_shard
#  ┃ PostgreSQL Index Bloat, btree only, db level, shard version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [shard]
#  ┃ TTL      ┆ 200
#  ┃ Priority ┆ 127
#  ┃ Timeout  ┆ 3s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 127-pg_index_bloat.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this index
#  ┃ LABEL    nspname              schema name of this index
#  ┃ LABEL    relname              relation name of this index relation
#  ┃ GAUGE    size                 total size in bytes of this index
#  ┃ GAUGE    ratio                estimated bloat ratio of this index, 0~1
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_index_bloat_size{datname,nspname,relname}
#  ┃ pg_index_bloat_ratio{datname,nspname,relname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG AS datname, nspname, idxname AS relname, relpages::BIGINT * bs AS size,
#  ┃        COALESCE((relpages - ( reltuples * (6 + ma - (CASE WHEN index_tuple_hdr % ma = 0 THEN ma ELSE index_tuple_hdr % ma END)
#  ┃                                                + nulldatawidth + ma - (CASE WHEN nulldatawidth % ma = 0 THEN ma ELSE nulldatawidth % ma END))
#  ┃                                   / (bs - pagehdr)::FLOAT  + 1 )), 0) / relpages::FLOAT AS ratio
#  ┃ FROM (
#  ┃          SELECT nspname,
#  ┃                 idxname,
#  ┃                 reltuples,
#  ┃                 relpages,
#  ┃                 current_setting('block_size')::INTEGER                                                               AS bs,
#  ┃                 (CASE WHEN version() ~ 'mingw32' OR version() ~ '64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END)  AS ma,
#  ┃                 24                                                                                                   AS pagehdr,
#  ┃                 (CASE WHEN max(COALESCE(pg_stats.null_frac, 0)) = 0 THEN 2 ELSE 6 END)                               AS index_tuple_hdr,
#  ┃                 sum((1.0 - COALESCE(pg_stats.null_frac, 0.0)) *
#  ┃                     COALESCE(pg_stats.avg_width, 1024))::INTEGER                                                     AS nulldatawidth
#  ┃          FROM pg_attribute
#  ┃                   JOIN (
#  ┃              SELECT pg_namespace.nspname,
#  ┃                     ic.relname                                                   AS idxname,
#  ┃                     ic.reltuples,
#  ┃                     ic.relpages,
#  ┃                     pg_index.indrelid,
#  ┃                     pg_index.indexrelid,
#  ┃                     tc.relname                                                   AS tablename,
#  ┃                     regexp_split_to_table(pg_index.indkey::TEXT, ' ') :: INTEGER AS attnum,
#  ┃                     pg_index.indexrelid                                          AS index_oid
#  ┃              FROM pg_index
#  ┃                       JOIN pg_class ic ON pg_index.indexrelid = ic.oid
#  ┃                       JOIN pg_class tc ON pg_index.indrelid = tc.oid
#  ┃                       JOIN pg_namespace ON pg_namespace.oid = ic.relnamespace
#  ┃                       JOIN pg_am ON ic.relam = pg_am.oid
#  ┃              WHERE pg_am.amname = 'btree' AND ic.relpages > 0
#  ┃                AND (nspname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR nspname = 'user_search')
#  ┃          ) ind_atts ON pg_attribute.attrelid = ind_atts.indexrelid AND pg_attribute.attnum = ind_atts.attnum
#  ┃                   JOIN pg_stats ON pg_stats.schemaname = ind_atts.nspname
#  ┃              AND ((pg_stats.tablename = ind_atts.tablename AND pg_stats.attname = pg_get_indexdef(pg_attribute.attrelid, pg_attribute.attnum, TRUE))
#  ┃                  OR (pg_stats.tablename = ind_atts.idxname AND pg_stats.attname = pg_attribute.attname))
#  ┃          WHERE pg_attribute.attnum > 0
#  ┃          GROUP BY 1, 2, 3, 4, 5, 6
#  ┃      ) est;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_index_bloat_shard:
  name: pg_index_bloat
  desc: PostgreSQL Index Bloat, btree only, db level, shard version

  query: |
    SELECT CURRENT_CATALOG AS datname, nspname, idxname AS relname, relpages::BIGINT * bs AS size,
           COALESCE((relpages - ( reltuples * (6 + ma - (CASE WHEN index_tuple_hdr % ma = 0 THEN ma ELSE index_tuple_hdr % ma END)
                                                   + nulldatawidth + ma - (CASE WHEN nulldatawidth % ma = 0 THEN ma ELSE nulldatawidth % ma END))
                                      / (bs - pagehdr)::FLOAT  + 1 )), 0) / relpages::FLOAT AS ratio
    FROM (
             SELECT nspname,
                    idxname,
                    reltuples,
                    relpages,
                    current_setting('block_size')::INTEGER                                                               AS bs,
                    (CASE WHEN version() ~ 'mingw32' OR version() ~ '64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END)  AS ma,
                    24                                                                                                   AS pagehdr,
                    (CASE WHEN max(COALESCE(pg_stats.null_frac, 0)) = 0 THEN 2 ELSE 6 END)                               AS index_tuple_hdr,
                    sum((1.0 - COALESCE(pg_stats.null_frac, 0.0)) *
                        COALESCE(pg_stats.avg_width, 1024))::INTEGER                                                     AS nulldatawidth
             FROM pg_attribute
                      JOIN (
                 SELECT pg_namespace.nspname,
                        ic.relname                                                   AS idxname,
                        ic.reltuples,
                        ic.relpages,
                        pg_index.indrelid,
                        pg_index.indexrelid,
                        tc.relname                                                   AS tablename,
                        regexp_split_to_table(pg_index.indkey::TEXT, ' ') :: INTEGER AS attnum,
                        pg_index.indexrelid                                          AS index_oid
                 FROM pg_index
                          JOIN pg_class ic ON pg_index.indexrelid = ic.oid
                          JOIN pg_class tc ON pg_index.indrelid = tc.oid
                          JOIN pg_namespace ON pg_namespace.oid = ic.relnamespace
                          JOIN pg_am ON ic.relam = pg_am.oid
                 WHERE pg_am.amname = 'btree' AND ic.relpages > 0
                   AND (nspname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR nspname = 'user_search')
             ) ind_atts ON pg_attribute.attrelid = ind_atts.indexrelid AND pg_attribute.attnum = ind_atts.attnum
                      JOIN pg_stats ON pg_stats.schemaname = ind_atts.nspname
                 AND ((pg_stats.tablename = ind_atts.tablename AND pg_stats.attname = pg_get_indexdef(pg_attribute.attrelid, pg_attribute.attnum, TRUE))
                     OR (pg_stats.tablename = ind_atts.idxname AND pg_stats.attname = pg_attribute.attname))
             WHERE pg_attribute.attnum > 0
             GROUP BY 1, 2, 3, 4, 5, 6
         ) est;

  ttl: 200
  timeout: 3
  tags: [shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this index
    - nspname:
        usage: LABEL
        description: schema name of this index
    - relname:
        usage: LABEL
        description: relation name of this index relation
    - size:
        usage: GAUGE
        description: total size in bytes of this index
    - ratio:
        usage: GAUGE
        description: estimated bloat ratio of this index, 0~1




#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_func
#  ┃ PostgreSQL Function execution statistics, db level, normal version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [not:shard]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 128
#  ┃ Timeout  ┆ 1s
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 128-pg_func.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this function
#  ┃ LABEL    nspname              schema name of this function
#  ┃ LABEL    funcname             function name of this function
#  ┃ LABEL    funcid               function id, note that function could override
#  ┃ COUNTER  calls                how many times this function has been called
#  ┃ COUNTER  total_time           how much time spent in this function and it's child function, in ms
#  ┃ COUNTER  self_time            how much time spent in this function itself (other func not included), in ms
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_func_calls{datname,nspname,funcname,funcid}
#  ┃ pg_func_total_time{datname,nspname,funcname,funcid}
#  ┃ pg_func_self_time{datname,nspname,funcname,funcid}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG AS datname,
#  ┃        schemaname      AS nspname,
#  ┃        funcname,
#  ┃        funcid,
#  ┃        calls,
#  ┃        total_time,
#  ┃        self_time
#  ┃ FROM pg_stat_user_functions;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_func:
  name: pg_func
  desc: PostgreSQL Function execution statistics, db level, normal version

  query: |
    SELECT CURRENT_CATALOG AS datname,
           schemaname      AS nspname,
           funcname,
           funcid,
           calls,
           total_time,
           self_time
    FROM pg_stat_user_functions;

  ttl: 10
  timeout: 1
  tags: [not:shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this function
    - nspname:
        usage: LABEL
        description: schema name of this function
    - funcname:
        usage: LABEL
        description: function name of this function
    - funcid:
        usage: LABEL
        description: function id, note that function could override
    - calls:
        usage: COUNTER
        description: how many times this function has been called
    - total_time:
        usage: COUNTER
        description: how much time spent in this function and it's child function, in ms
    - self_time:
        usage: COUNTER
        description: how much time spent in this function itself (other func not included), in ms



#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pg_func.pg_func_shard
#  ┃ PostgreSQL Function execution statistics, db level, shard version
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [shard]
#  ┃ TTL      ┆ 10
#  ┃ Priority ┆ 128
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 90400 ~ higher
#  ┃ Source   ┆ 128-pg_func.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    datname              database name of this function
#  ┃ LABEL    nspname              schema name of this function
#  ┃ LABEL    funcname             function name of this function
#  ┃ LABEL    funcid               function id, note that function could override
#  ┃ COUNTER  calls                how many times this function has been called
#  ┃ COUNTER  total_time           how much time spent in this function and it's child function, in ms
#  ┃ COUNTER  self_time            how much time spent in this function itself (other func not included), in ms
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pg_func_calls{datname,nspname,funcname,funcid}
#  ┃ pg_func_total_time{datname,nspname,funcname,funcid}
#  ┃ pg_func_self_time{datname,nspname,funcname,funcid}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SELECT CURRENT_CATALOG AS datname,
#  ┃        schemaname      AS nspname,
#  ┃        funcname,
#  ┃        funcid,
#  ┃        calls,
#  ┃        total_time,
#  ┃        self_time
#  ┃ FROM pg_stat_user_functions
#  ┃ WHERE schemaname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR schemaname = 'user_search';
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pg_func_shard:
  name: pg_func
  desc: PostgreSQL Function execution statistics, db level, shard version

  query: |
    SELECT CURRENT_CATALOG AS datname,
           schemaname      AS nspname,
           funcname,
           funcid,
           calls,
           total_time,
           self_time
    FROM pg_stat_user_functions
    WHERE schemaname IN (SELECT min(nspname) FROM pg_namespace WHERE nspname LIKE 'rel_8192_%' LIMIT 1) OR schemaname = 'user_search';

  ttl: 10
  tags: [shard]
  min_version: 090400

  metrics:
    - datname:
        usage: LABEL
        description: database name of this function
    - nspname:
        usage: LABEL
        description: schema name of this function
    - funcname:
        usage: LABEL
        description: function name of this function
    - funcid:
        usage: LABEL
        description: function id, note that function could override
    - calls:
        usage: COUNTER
        description: how many times this function has been called
    - total_time:
        usage: COUNTER
        description: how much time spent in this function and it's child function, in ms
    - self_time:
        usage: COUNTER
        description: how much time spent in this function itself (other func not included), in ms


#-------------------------------------------------------------#
# pgbouncer_list
# Desc: http://www.pgbouncer.org/usage.html#show-lists
#-------------------------------------------------------------#
# metrics:
# pgbouncer_list_items{list="..."}
# label could be:
# databases:      Count of databases.
# users:          Count of users.
# pools:          Count of pools.
# free_clients:   Count of free clients.
# used_clients:   Count of used clients.
# login_clients:  Count of clients in login state.
# free_servers:   Count of free servers.
# used_servers:   Count of used servers.
# dns_names:      Count of DNS names in the cache.
# dns_zones:      Count of DNS zones in the cache.
# dns_queries:    Count of in-flight DNS queries.
# dns_pending:    not used
#-------------------------------------------------------------#


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pgbouncer_list
#  ┃ pgbouncer entry list: http://www.pgbouncer.org/usage.html#show-lists
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [pgbouncer]
#  ┃ TTL      ┆ 5
#  ┃ Priority ┆ 129
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 10800 ~ higher
#  ┃ Source   ┆ 129-pgbouncer_list.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    list                 pgbouncer internal list name
#  ┃ GAUGE    items                count of curresponding pgbouncer object
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pgbouncer_list_items{list}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SHOW LISTS;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pgbouncer_list:
  desc: "pgbouncer entry list: http://www.pgbouncer.org/usage.html#show-lists"

  query: |
    SHOW LISTS;

  ttl: 5
  tags: [pgbouncer]
  min_version: 10800

  metrics:
    - list:
        usage: LABEL
        description: pgbouncer internal list name
    - items:
        usage: GAUGE
        description: count of curresponding pgbouncer object


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pgbouncer_stat
#  ┃ pgbouncer stats per database: http://www.pgbouncer.org/usage.html#show-stats
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [pgbouncer]
#  ┃ TTL      ┆ 5
#  ┃ Priority ┆ 130
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 10800 ~ higher
#  ┃ Source   ┆ 130-pgbouncer_stat.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    database             database name of this relation
#  ┃ GAUGE    total_xact_count     total tr
#  ┃ GAUGE    total_query_count    relation name of this relation
#  ┃ COUNTER  total_received       how many times this function has been called
#  ┃ COUNTER  total_sent           how much time spent in this function and it's child function, in ms
#  ┃ COUNTER  total_xact_time      how much time spent in this function itself (other func not included), in ms
#  ┃ COUNTER  total_query_time     how many times this function has been called
#  ┃ COUNTER  total_wait_time      how much time spent in this function and it's child function, in ms
#  ┃ GAUGE    avg_xact_count       how much time spent in this function itself (other func not included), in ms
#  ┃ GAUGE    avg_query_count      how many times this function has been called
#  ┃ GAUGE    avg_recv             how much time spent in this function and it's child function, in ms
#  ┃ GAUGE    avg_sent             how much time spent in this function itself (other func not included), in ms
#  ┃ GAUGE    avg_xact_time        how many times this function has been called
#  ┃ GAUGE    avg_query_time       how much time spent in this function and it's child function, in ms
#  ┃ GAUGE    avg_wait_time        how much time spent in this function itself (other func not included), in ms
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pgbouncer_stat_total_xact_count{datname}
#  ┃ pgbouncer_stat_total_query_count{datname}
#  ┃ pgbouncer_stat_total_received{datname}
#  ┃ pgbouncer_stat_total_sent{datname}
#  ┃ pgbouncer_stat_total_xact_time{datname}
#  ┃ pgbouncer_stat_total_query_time{datname}
#  ┃ pgbouncer_stat_total_wait_time{datname}
#  ┃ pgbouncer_stat_avg_xact_count{datname}
#  ┃ pgbouncer_stat_avg_query_count{datname}
#  ┃ pgbouncer_stat_avg_recv{datname}
#  ┃ pgbouncer_stat_avg_sent{datname}
#  ┃ pgbouncer_stat_avg_xact_time{datname}
#  ┃ pgbouncer_stat_avg_query_time{datname}
#  ┃ pgbouncer_stat_avg_wait_time{datname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SHOW STATS;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pgbouncer_stat:
  desc: "pgbouncer stats per database: http://www.pgbouncer.org/usage.html#show-stats"

  query: |
    SHOW STATS;

  ttl: 5
  tags: [pgbouncer]
  min_version: 10800

  metrics:
    - database:
        usage: LABEL
        rename: datname
        description: database name of this relation
    - total_xact_count:
        usage: GAUGE
        description: total tr
    - total_query_count:
        usage: GAUGE
        description: relation name of this relation
    - total_received:
        usage: COUNTER
        description: how many times this function has been called
    - total_sent:
        usage: COUNTER
        description: how much time spent in this function and it's child function, in ms
    - total_xact_time:
        usage: COUNTER
        description: how much time spent in this function itself (other func not included), in ms
    - total_query_time:
        usage: COUNTER
        description: how many times this function has been called
    - total_wait_time:
        usage: COUNTER
        description: how much time spent in this function and it's child function, in ms
    - avg_xact_count:
        usage: GAUGE
        description: how much time spent in this function itself (other func not included), in ms
    - avg_query_count:
        usage: GAUGE
        description: how many times this function has been called
    - avg_recv:
        usage: GAUGE
        description: how much time spent in this function and it's child function, in ms
    - avg_sent:
        usage: GAUGE
        description: how much time spent in this function itself (other func not included), in ms
    - avg_xact_time:
        usage: GAUGE
        description: how many times this function has been called
    - avg_query_time:
        usage: GAUGE
        description: how much time spent in this function and it's child function, in ms
    - avg_wait_time:
        usage: GAUGE
        description: how much time spent in this function itself (other func not included), in ms


#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pgbouncer_database
#  ┃ pgbouncer database stats: http://www.pgbouncer.org/usage.html#show-databases
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [pgbouncer]
#  ┃ TTL      ┆ 5
#  ┃ Priority ┆ 131
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 10800 ~ higher
#  ┃ Source   ┆ 131-pgbouncer_database.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    name                 name of configured database entry
#  ┃ LABEL    host                 host pgbouncer connects to
#  ┃ LABEL    port                 port pgbouncer connects to
#  ┃ LABEL    database             actual database name pgbouncer connects to
#  ┃ DISCARD  force_user
#  ┃ COUNTER  pool_size            maximum number of server connections
#  ┃ GAUGE    reserve_pool         maximum number of additional connections for this database
#  ┃ DISCARD  pool_mode
#  ┃ GAUGE    max_connections      maximum number of allowed connections for this database
#  ┃ GAUGE    current_connections  current number of connections for this database
#  ┃ GAUGE    paused               1 if this database is currently paused, else 0
#  ┃ GAUGE    disabled             1 if this database is currently disabled, else 0
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pgbouncer_database_pool_size{datname,host,port,real_datname}
#  ┃ pgbouncer_database_reserve_pool{datname,host,port,real_datname}
#  ┃ pgbouncer_database_max_connections{datname,host,port,real_datname}
#  ┃ pgbouncer_database_current_connections{datname,host,port,real_datname}
#  ┃ pgbouncer_database_paused{datname,host,port,real_datname}
#  ┃ pgbouncer_database_disabled{datname,host,port,real_datname}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SHOW DATABASES;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

pgbouncer_database:
  desc: "pgbouncer database stats: http://www.pgbouncer.org/usage.html#show-databases"

  query: |
    SHOW DATABASES;

  ttl: 5
  tags: [pgbouncer]
  min_version: 10800

  metrics:
    - name:
        usage: LABEL
        rename: datname
        description: name of configured database entry
    - host:
        usage: LABEL
        description: host pgbouncer connects to
    - port:
        usage: LABEL
        description:  port pgbouncer connects to
    - database:
        usage: LABEL
        rename: real_datname
        description: actual database name pgbouncer connects to
    - force_user:
        usage: DISCARD
    - pool_size:
        usage: COUNTER
        description: maximum number of server connections
    - reserve_pool:
        usage: GAUGE
        description: maximum number of additional connections for this database
    - pool_mode:
        usage: DISCARD
    - max_connections:
        usage: GAUGE
        description: maximum number of allowed connections for this database
    - current_connections:
        usage: GAUGE
        description: current number of connections for this database
    - paused:
        usage: GAUGE
        description: 1 if this database is currently paused, else 0
    - disabled:
        usage: GAUGE
        description: 1 if this database is currently disabled, else 0



#  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#  ┃ pgbouncer_pool
#  ┃ pgbouncer pool stats: http://www.pgbouncer.org/usage.html#show-pools
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ Tags     ┆ [pgbouncer]
#  ┃ TTL      ┆ 5
#  ┃ Priority ┆ 132
#  ┃ Timeout  ┆ 100ms
#  ┃ Fatal    ┆ false
#  ┃ Version  ┆ 10800 ~ higher
#  ┃ Source   ┆ 132-pgbouncer_pool.yaml
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ LABEL    database             database name of this relation
#  ┃ LABEL    user                 user
#  ┃ GAUGE    cl_active            client connections that are linked to server connection and can process queries
#  ┃ GAUGE    cl_waiting           client connections that have sent queries but have not yet got a server connection
#  ┃ GAUGE    sv_active            server connections that are linked to a client
#  ┃ GAUGE    sv_idle              server connections that are unused and immediately usable for client queries
#  ┃ GAUGE    sv_used              server connections that have been idle for more than server_check_delay (means have to run check query)
#  ┃ GAUGE    sv_tested            server connections that are currently running reset or check query
#  ┃ GAUGE    sv_login             server connections currently in the process of logging in
#  ┃ GAUGE    maxwait              how long the first(oldest) client in the queue has waited, in seconds, key metric
#  ┃ GAUGE    maxwait_us           microsecond part of the maximum waiting time.
#  ┃ DISCARD  pool_mode            the pooling mode in use
#  ┣┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ pgbouncer_pool_active_clients{datname,user}
#  ┃ pgbouncer_pool_waiting_clients{datname,user}
#  ┃ pgbouncer_pool_active_servers{datname,user}
#  ┃ pgbouncer_pool_idle_servers{datname,user}
#  ┃ pgbouncer_pool_used_servers{datname,user}
#  ┃ pgbouncer_pool_tested_servers{datname,user}
#  ┃ pgbouncer_pool_login_servers{datname,user}
#  ┃ pgbouncer_pool_maxwait{datname,user}
#  ┃ pgbouncer_pool_maxwait_us{datname,user}
#  ┗┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
#  ┃ SHOW POOLS;
#  ┃
#  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
pgbouncer_pool:
  desc: "pgbouncer pool stats: http://www.pgbouncer.org/usage.html#show-pools"

  query: |
    SHOW POOLS;

  ttl: 5
  tags: [pgbouncer]
  min_version: 10800

  metrics:
    - database:
        usage: LABEL
        rename: datname
        description: database name of this relation
    - user:
        usage: LABEL
        description: user
    - cl_active:
        usage: GAUGE
        rename: active_clients
        description: client connections that are linked to server connection and can process queries
    - cl_waiting:
        usage: GAUGE
        rename: waiting_clients
        description: client connections that have sent queries but have not yet got a server connection
    - sv_active:
        usage: GAUGE
        rename: active_servers
        description: server connections that are linked to a client
    - sv_idle:
        usage: GAUGE
        rename: idle_servers
        description: server connections that are unused and immediately usable for client queries
    - sv_used:
        usage: GAUGE
        rename: used_servers
        description: server connections that have been idle for more than server_check_delay (means have to run check query)
    - sv_tested:
        usage: GAUGE
        rename: tested_servers
        description: server connections that are currently running reset or check query
    - sv_login:
        usage: GAUGE
        rename: login_servers
        description:  server connections currently in the process of logging in
    - maxwait:
        usage: GAUGE
        description: how long the first(oldest) client in the queue has waited, in seconds, key metric
    - maxwait_us:
        usage: GAUGE
        description: microsecond part of the maximum waiting time.
    - pool_mode:
        usage: DISCARD
        description: the pooling mode in use

